{"version":3,"sources":["AccountsFactory.js","AutocompleteFactory.js","BudgetsFactory.js","FeedbackFactory.js","FilterFactory.js","HelpersFactory.js","PreferencesFactory.js","SavingsFactory.js","TotalsFactory.js","TransactionsFactory.js","UsersFactory.js"],"names":[],"mappingsvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"factories.js","sourcesContent":["app.factory('AccountsFactory', function ($http) {\n    return {\n        getAccounts: function () {\n\n            var $url = '/api/accounts';\n\n            return $http.get($url);\n        },\n        insertAccount: function () {\n            var $url = '/api/accounts';\n            var $data = {\n                name: $(\".new_account_input\").val()\n            };\n\n            return $http.post($url, $data);\n        },\n        updateAccountName: function ($account_id, $account_name) {\n            var $url = '/api/accounts/' + $account_id;\n            var $data = { name: $account_name };\n\n            return $http.put($url, $data);\n        },\n        deleteAccount: function ($account) {\n            console.log($account.path);\n            var $url = $account.path;\n\n            return $http.delete($url);\n        }\n\n    };\n});","app.factory('AutocompleteFactory', function ($http) {\n\tvar $object = {};\n\n\t$object.duplicateCheck = function ($this, $transactions_without_duplicates) {\n\t\tvar $duplicate_counter = 0;\n\t\t$($transactions_without_duplicates).each(function () {\n\t\t\tif ($this.description === this.description && $this.merchant === this.merchant && $this.total === this.total && $this.type === this.type && $this.account === this.account) {\n\t\t\t\t//it is a duplicate\n\t\t\t\t$duplicate_counter += 1;\n\t\t\t}\n\t\t});\n\t\tif ($duplicate_counter === 0) {\n\t\t\tvar $allocated_percent = $this.tags.allocated_percent;\n\t\t\tvar $allocated_fixed = null;\n\t\t\tvar $amount = $this.tags.amount;\n\n\t\t\tif ($allocated_percent === null) {\n\t\t\t\t$allocated_fixed = $amount;\n\t\t\t}\n\t\t\t$transactions_without_duplicates.push($this);\n\t\t}\n\t};\n\t$object.removeDuplicates = function ($transactions) {\n\t\t//for the transaction autocomplete\n\t\tfor (var i = 0; i < $transactions.length; i++) {\n\t\t\tvar $transaction = $transactions[i];\n\t\t\tvar $id = $transaction.id;\n\t\t\tvar $description = $transaction.description;\n\t\t\tvar $merchant = $transaction.merchant;\n\t\t\tvar $total = $transaction.total;\n\t\t\tvar $type = $transaction.type;\n\t\t\tvar $account = $transaction.account;\n\t\t\tvar $from_account = $transaction.from_account;\n\t\t\tvar $to_account = $transaction.to_account;\n\n\t\t\tvar $object_1;\n\n\t\t\tif ($type === 'transfer') {\n\t\t\t\t$object_1 = {\n\t\t\t\t\tdescription: $description,\n\t\t\t\t\ttotal: $total,\n\t\t\t\t\tfrom_account: $from_account,\n\t\t\t\t\tto_account: $to_account\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$object_1 = {\n\t\t\t\t\tdescription: $description,\n\t\t\t\t\tmerchant: $merchant,\n\t\t\t\t\ttotal: $total,\n\t\t\t\t\ttype: $type,\n\t\t\t\t\taccount: $account\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//we have the properties that we don't want to be duplicates in an object. now we loop through the array again to make another object, then we can compare if the two objects are equal.\n\t\t\tfor (var j = 0; j < $transactions.length; j++) {\n\t\t\t\tvar $t = $transactions[j];\n\t\t\t\tvar $index = $transactions.indexOf($t);\n\t\t\t\tvar $t_id = $t.id;\n\t\t\t\tvar $t_description = $t.description;\n\t\t\t\tvar $t_merchant = $t.merchant;\n\t\t\t\tvar $t_total = $t.total;\n\t\t\t\tvar $t_type = $t.type;\n\t\t\t\tvar $t_account = $t.account;\n\t\t\t\tvar $t_from_account = $t.from_account;\n\t\t\t\tvar $t_to_account = $t.to_account;\n\n\t\t\t\tvar $object_2 = {};\n\n\t\t\t\tif ($t_id !== $id && $t_type === $type) {\n\t\t\t\t\t//they are the same type, and not the same transaction\n\t\t\t\t\tif ($type === 'transfer') {\n\t\t\t\t\t\t$object_2 = {\n\t\t\t\t\t\t\tdescription: $t_description,\n\t\t\t\t\t\t\ttotal: $t_total,\n\t\t\t\t\t\t\tfrom_account: $t_from_account,\n\t\t\t\t\t\t\tto_account: $t_to_account\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$object_2 = {\n\t\t\t\t\t\t\tdescription: $t_description,\n\t\t\t\t\t\t\tmerchant: $t_merchant,\n\t\t\t\t\t\t\ttotal: $t_total,\n\t\t\t\t\t\t\ttype: $t_type,\n\t\t\t\t\t\t\taccount: $t_account\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (_.isEqual($object_1, $object_2)) {\n\t\t\t\t\t$transactions.splice($index, 1);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $transactions;\n\t};\n\t$object.transferTransactions = function ($transactions) {\n\t\tvar $counter = 0;\n\t\tvar $from_account;\n\t\tvar $to_account;\n\t\tvar $total;\n\t\t\n\t\t$($transactions).each(function () {\n\t\t\tvar $index = $transactions.indexOf(this);\n\t\t\tif (this.type === \"transfer\") {\n\t\t\t\t$counter++;\n\t\t\t\tif (this.total.indexOf(\"-\") != -1) {\n\t\t\t\t\t//this is a negative transfer\n\t\t\t\t\t$from_account = this.account;\n\t\t\t\t}\n\t\t\t\telse if (this.total.indexOf(\"-\") == -1) {\n\t\t\t\t\t//this is a positive transfer\n\t\t\t\t\t$to_account = this.account;\n\t\t\t\t\t$total = this.total;\n\t\t\t\t}\n\t\t\t\tif ($counter % 2 === 1) {\n\t\t\t\t\t//remove every second transfer transaction from the array\n\t\t\t\t\t$transactions.splice($index, 1);\n\t\t\t\t}\n\t\t\t\telse if ($counter % 2 === 0) {\n\t\t\t\t\t//keep the first of every second transfer transaction and combine the two transfers into one\n\t\t\t\t\tthis.from_account = $from_account;\n\t\t\t\t\tthis.to_account = $to_account;\n\t\t\t\t\tthis.account = {};\n\t\t\t\t\t//so the total is positive\n\t\t\t\t\tthis.total = $total;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn $transactions;\n\t};\n\treturn $object;\n});","app.factory('BudgetsFactory', function ($http) {\n\treturn {\n\n        insert: function ($budget) {\n            var $url = '/api/budgets';\n\n            var $data = {\n                type: $budget.type,\n                name: $budget.name,\n                amount: $budget.amount,\n                starting_date: $budget.sql_starting_date\n            };\n\n            return $http.post($url, $data);\n        },\n\n\t\tupdate: function ($budget) {\n            var $url = $budget.path;\n\n            var $data = {\n                id: $budget.id,\n                name: $budget.name,\n                type: $budget.type,\n                amount: $budget.amount,\n                starting_date: $budget.sqlStartingDate\n            };\n            \n            return $http.put($url, $data);\n\t\t},\n\n        destroy: function ($budget) {\n            var $url = '/api/budgets/'+$budget.id;\n\n            return $http.delete($url);\n        }\n\n\t};\n});","app.factory('FeedbackFactory', function ($http) {\n    var $object = {};\n\n    $object.provideFeedback = function ($message) {\n        //My watch in my controller would only work once unless I made an object here.\n        //(Just $object.message would not work.)\n        $object.data = {\n            message: $message,\n            update: true\n        };\n        return $object.data;\n    };\n\n    return $object;\n});\n","app.factory('FilterFactory', function ($http) {\n    var $object = {};\n\n    $object.resetFilter = function () {\n        $object.filter = {\n\n            total: {\n                in: \"\",\n                out: \"\"\n            },\n            types: {\n                in: [],\n                out: []\n            },\n            accounts: {\n                in: [],\n                out: []\n            },\n            single_date: {\n                in: {\n                    user: \"\",\n                    sql: \"\"\n                },\n                out: {\n                    user: \"\",\n                    sql: \"\"\n                }\n            },\n            from_date: {\n                in: {\n                    user: \"\",\n                    sql: \"\"\n                },\n                out: {\n                    user: \"\",\n                    sql: \"\"\n                }\n            },\n            to_date: {\n                in: {\n                    user: \"\",\n                    sql: \"\"\n                },\n                out: {\n                    user: \"\",\n                    sql: \"\"\n                }\n            },\n            description: {\n                in: \"\",\n                out: \"\"\n            },\n            merchant: {\n                in: \"\",\n                out: \"\"\n            },\n            budgets: {\n                in: {\n                    and: [],\n                    or: []\n                },\n                out: []\n            },\n            numBudgets: {\n                in: \"all\",\n                out: \"\"\n            },\n            reconciled: \"any\",\n            offset: 0,\n            num_to_fetch: 30\n        };\n    };\n\n    $object.resetFilter();\n\n    $object.formatDates = function ($filter) {\n        if ($filter.single_date.in.user) {\n            $filter.single_date.in.sql = Date.parse($filter.single_date.in.user).toString('yyyy-MM-dd');\n        }\n        else {\n            $filter.single_date.in.sql = \"\";\n        }\n        if ($filter.single_date.out.user) {\n            $filter.single_date.out.sql = Date.parse($filter.single_date.out.user).toString('yyyy-MM-dd');\n        }\n        else {\n            $filter.single_date.out.sql = \"\";\n        }\n        if ($filter.from_date.in.user) {\n            $filter.from_date.in.sql = Date.parse($filter.from_date.in.user).toString('yyyy-MM-dd');\n        }\n        else {\n            $filter.from_date.in.sql = \"\";\n        }\n        if ($filter.from_date.out.user) {\n            $filter.from_date.out.sql = Date.parse($filter.from_date.out.user).toString('yyyy-MM-dd');\n        }\n        else {\n            $filter.from_date.out.sql = \"\";\n        }\n        if ($filter.to_date.in.user) {\n            $filter.to_date.in.sql = Date.parse($filter.to_date.in.user).toString('yyyy-MM-dd');\n        }\n        else {\n            $filter.to_date.in.sql = \"\";\n        }\n        if ($filter.to_date.out.user) {\n            $filter.to_date.out.sql = Date.parse($filter.to_date.out.user).toString('yyyy-MM-dd');\n        }\n        else {\n            $filter.to_date.out.sql = \"\";\n        }\n\n        return $filter;\n    };\n\n    $object.filterTransactions = function ($filter) {\n        $object.filter = $object.formatDates($filter);\n\n        var $url = 'api/select/filter';\n\n        return $http.post($url, {'filter': $filter});\n    };\n\n    /**\n     * For displaying the filtered transactions\n     * and the filter totals\n     * and the non-filter totals on the page\n     * todo: maybe this should be in some totals factory\n     * @param $data\n     */\n    //$object.updateDataForControllers = function ($data) {\n    //    if ($data.filter_results) {\n    //        //This includes filtered transactions as well as filter totals\n    //        $object.filter_results = $data.filter_results;\n    //    }\n    //};\n\n    return $object;\n});","//app.factory('HelpersFactory', function ($http) {\n//    return {\n//\n//\n//    };\n//});","app.factory('PreferencesFactory', function ($http) {\n    return {\n        savePreferences: function ($preferences) {\n            var $url = 'api/update/preferences';\n            var $data = $preferences;\n\n            return $http.post($url, $data);\n        },\n        insertOrUpdateDateFormat: function ($new_format) {\n            var $url = 'api/insert/insertOrUpdateDateFormat';\n            var $data = {\n                new_format: $new_format\n            };\n\n            return $http.post($url, $data);\n        },\n        updateColors: function ($colors) {\n            var $url = 'api/update/colors';\n            var $description = 'colors';\n            var $data = {\n                description: $description,\n                colors: $colors\n            };\n\n            return $http.post($url, $data);\n        }\n    };\n});","app.factory('SavingsFactory', function ($http) {\n\treturn {\n\t\tupdateSavingsTotal: function () {\n\t\t\tvar $amount = $(\"#edited-savings-total\").val().replace(',', '');\n\t\t\tvar $url = '/api/savings/set';\n\t\t\tvar $data = {\n\t\t\t\tamount: $amount\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.put($url, $data);\n\t\t},\n\t\taddFixedToSavings: function () {\n\t\t\tvar $amount_to_add = $(\"#add-fixed-to-savings\").val();\n\t\t\tvar $url = '/api/savings/increase';\n\t\t\tvar $data = {\n\t\t\t\tamount: $amount_to_add\n\t\t\t};\n\t\t\t$(\"#add-fixed-to-savings\").val(\"\");\n\t\t\t\n\t\t\treturn $http.put($url, $data);\n\t\t},\n\t\taddPercentageToSavings: function () {\n\t\t\tvar $percentage_of_RB = $(\"#add-percentage-to-savings\").val();\n\t\t\tvar $url = '/api/savings/increase';\n\t\t\tvar $data = {\n\t\t\t\tamount: $percentage_of_RB,\n\t\t\t};\n\t\t\t$(\"#add-percentage-to-savings\").val(\"\");\n\t\t\t\n\t\t\treturn $http.put($url, $data);\n\t\t},\n\t\taddPercentageToSavingsAutomatically: function ($amount_to_add) {\n\t\t\tvar $url = '/api/savings/increase';\n\t\t\tvar $data = {\n\t\t\t\tamount: $amount_to_add\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.put($url, $data);\n\t\t},\n\t\treverseAutomaticInsertIntoSavings: function ($amount_to_subtract) {\n\t\t\tvar $url = '/api/savings/decrease';\n\t\t\tvar $data = {\n\t\t\t\tamount: $amount_to_subtract\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.put($url, $data);\n\t\t}\n\t};\n});","app.factory('TotalsFactory', function ($http) {\n    return {\n\n        getTotals: function () {\n            var $url = '/api/totals';\n\n            return $http.get($url);\n        }\n\n    };\n});","app.factory('TransactionsFactory', function ($http) {\n    var $object = {};\n    $object.totals = {};\n\n    $object.insertIncomeOrExpenseTransaction = function ($newTransaction) {\n        var $url = '/api/transactions';\n\n        if ($newTransaction.type === 'expense' && $newTransaction.total > 0) {\n            //transaction is an expense without the negative sign\n            $newTransaction.total*= -1;\n        }\n\n        return $http.post($url, $newTransaction);\n    };\n\n    $object.insertTransferTransaction = function ($newTransaction, $direction) {\n        var $url = '/api/transactions';\n        var $data = $newTransaction;\n\n        $data.direction = $direction;\n\n        if ($direction === 'from') {\n            $data.account_id = $data.from_account_id;\n        }\n        else if ($direction === 'to') {\n            $data.account_id = $data.to_account_id;\n        }\n\n        return $http.post($url, $data);\n    };\n\n    $object.updateMassTags = function ($tag_array, $url, $tag_location) {\n        var $transaction_id;\n\n        var $tag_id_array = $tag_array.map(function (el) {\n            return el.tag_id;\n        });\n\n        $tag_id_array = JSON.stringify($tag_id_array);\n\n        $(\".checked\").each(function () {\n            $transaction_id = $(this).closest(\"tbody\").attr('id');\n            var $url = 'api/update/massTags';\n            var $description = 'mass edit tags';\n            var $data = {\n                description: $description,\n                transaction_id: $transaction_id,\n                tag_id_array: $tag_id_array\n            };\n\n            return $http.post($url, $data);\n        });\n    };\n\n    $object.massEditDescription = function () {\n        var $transaction_id;\n        var $description = $(\"#mass-edit-description-input\").val();\n        var $info = {\n            transaction_id: $transaction_id,\n            description: $description\n        };\n\n        $(\".checked\").each(function () {\n            $transaction_id = $(this).closest(\"tbody\").attr('id');\n\n            var $url = 'api/update/massDescription';\n            var $data = {\n                info: $info\n            };\n\n            return $http.post($url, $data);\n        });\n    };\n\n    $object.updateTransaction = function ($transaction, $filter) {\n        var $url = $transaction.path;\n\n        //Make sure total is negative for an expense transaction\n        if ($transaction.type === 'expense' && $transaction.total > 0) {\n            $transaction.total = $transaction.total * -1;\n        }\n\n        var $data = {\n            transaction: $transaction,\n            filter: $filter\n        };\n\n        return $http.put($url, $data);\n    };\n\n    $object.updateReconciliation = function ($transaction_id, $reconciled, $filter) {\n        var $url = 'api/updateReconciliation';\n\n        if ($reconciled === true) {\n            $reconciled = 'true';\n        }\n        else {\n            $reconciled = 'false';\n        }\n\n        var $data = {\n            id: $transaction_id,\n            reconciled: $reconciled,\n            filter: $filter\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.deleteTransaction = function ($transaction) {\n        var $url = $transaction.path;\n\n        return $http.delete($url);\n    };\n\n    $object.massDelete = function () {\n        $(\".checked\").each(function () {\n            deleteTransaction($(this));\n        });\n    };\n\n    $object.countTransactionsWithBudget = function ($budget) {\n        var $url = '/api/select/countTransactionsWithBudget';\n\n        var $data = {\n            budget_id: $budget.id\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.getAllocationTotals = function ($transaction_id) {\n        var $url = 'api/select/allocationTotals';\n        var $data = {\n            transaction_id: $transaction_id\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.updateAllocation = function ($type, $value, $transaction_id, $budget_id) {\n        var $url = 'api/updateAllocation';\n        var $data = {\n            type: $type,\n            value: $value,\n            transaction_id: $transaction_id,\n            budget_id: $budget_id\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.updateAllocationStatus = function ($transaction_id, $status) {\n        var $url = 'api/updateAllocationStatus';\n        var $data = {\n            transaction_id: $transaction_id,\n            status: $status\n        };\n\n        return $http.post($url, $data);\n    };\n\n\n    return $object;\n});\n","app.factory('UsersFactory', function ($http) {\n    return {\n        deleteAccount: function ($user) {\n            var $url = $user.path;\n\n            return $http.delete($url);\n        }\n\n    };\n});"],"sourceRoot":"/source/"}