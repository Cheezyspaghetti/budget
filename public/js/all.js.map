{"version":3,"sources":["BaseController.js","HomeController.js","FilterController.js","TransactionsController.js","NewTransactionController.js","PreferencesController.js","AutocompleteFactory.js","BudgetsFactory.js","SavingsFactory.js","ColorsFactory.js","TransactionsFactory.js","PreferencesFactory.js","TagsFactory.js","AccountsFactory.js","FilterFactory.js","FeedbackFactory.js","DropdownsDirective.js","CheckboxesDirective.js","TotalsDirective.js","FilterDirective.js","TagAutocompleteDirective.js","FilterDropdownsDirective.js","TransactionAutocompleteDirective.js"],"names":[],"mappingsplvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpjfile":"all.js","sourcesContent":["var app = angular.module('budgetApp', ['checklist-model', 'ngAnimate'], function ($interpolateProvider) {\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n});\n\n/*==============================dates==============================*/\n\n$(\"#convert_date_button_2\").on('click', function () {\n    $(this).toggleClass(\"long_date\");\n    $(\"#my_results .date\").each(function () {\n        var $date = $(this).val();\n        var $parse = Date.parse($date);\n        var $toString;\n        if ($(\"#convert_date_button_2\").hasClass(\"long_date\")) {\n            $toString = $parse.toString('dd MMM yyyy');\n        }\n        else {\n            $toString = $parse.toString('dd/MM/yyyy');\n        }\n\n        $(this).val($toString);\n    });\n});\n\n/*==============================new month==============================*/\n\nfunction newMonth () {\n    $(\"#fixed-budget-info-table .spent\").each(function () {\n        $(this).text(0);\n    });\n}","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('HomeController', home);\n\n    function home ($scope, $http, BudgetsFactory, TransactionsFactory, PreferencesFactory, FeedbackFactory, ColorsFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.feedbackFactory = FeedbackFactory;\n        $scope.transactionsFactory = TransactionsFactory;\n        $scope.feedback_messages = [];\n        $scope.page = 'home';\n\n        $scope.colors = colors_response;\n        $scope.totals = totals_response;\n        $scope.me = me;\n        //$scope.loading = true;\n\n        $(window).load(function () {\n            $(\".main\").css('display', 'block');\n            $(\"footer, #navbar\").css('display', 'flex');\n            $(\"#page-loading\").hide();\n        });\n\n        /*=========show=========*/\n        $scope.show = {\n            actions: false,\n            status: false,\n            date: true,\n            description: true,\n            merchant: true,\n            total: true,\n            type: true,\n            account: true,\n            reconciled: true,\n            tags: true,\n            dlt: true,\n            // modals\n            color_picker: false,\n            //components\n            new_transaction: true,\n            basic_totals: true,\n            budget_totals: true,\n            filter_totals: true,\n            edit_transaction: false,\n            edit_tag: false,\n            edit_CSD: false,\n            filter: true,\n            autocomplete: {\n                description: false,\n                merchant: false\n            },\n            allocation_popup: false,\n            new_transaction_allocation_popup: false,\n            savings_total: {\n                input: false,\n                edit_btn: true\n            }\n        };\n\n        /**\n         * Watches\n         */\n\n        $scope.$watch('feedbackFactory.data', function (newValue, oldValue, scope) {\n            if (newValue && newValue.message) {\n                scope.provideFeedback(newValue.message);\n            }\n        });\n\n        $scope.$watch('PreferencesFactory.date_format', function (newValue, oldValue) {\n            if (!newValue) {\n                return;\n            }\n            PreferencesFactory.insertOrUpdateDateFormat(newValue).then(function (response) {\n                // $scope. = response.data;\n            });\n        });\n\n        $scope.$watchCollection('colors', function (newValue) {\n            $(\"#income-color-picker\").val(newValue.income);\n            $(\"#expense-color-picker\").val(newValue.expense);\n            $(\"#transfer-color-picker\").val(newValue.transfer);\n        });\n\n        /**\n         * End watches\n         */\n\n        $scope.showLoading = function () {\n            $scope.loading = true;\n        };\n\n        $scope.hideLoading = function () {\n            $scope.loading = false;\n        };\n\n        $scope.provideFeedback = function ($message) {\n            $scope.feedback_messages.push($message);\n            setTimeout(function () {\n                $scope.feedback_messages = _.without($scope.feedback_messages, $message);\n                $scope.$apply();\n            }, 3000);\n        };\n\n        $scope.responseError = function (response) {\n            if (response.status === 503) {\n                FeedbackFactory.provideFeedback('Sorry, application under construction. Please try again later.');\n            }\n            else {\n                FeedbackFactory.provideFeedback('There was an error');\n            }\n        };\n\n        /**\n         * For trying to get the page load faster,\n         * seeing the queries that are taking place\n         */\n        $scope.debugTotals = function () {\n            return $http.get('/test');\n        };\n\n        $scope.testFeedback = function () {\n            $scope.provideFeedback('something');\n        };\n\n        $scope.updateColors = function () {\n            ColorsFactory.updateColors($scope.colors)\n                .then(function (response) {\n                    //Todo: return the colors in the response to update them\n                    $scope.show.color_picker = false;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.defaultColor = function ($type, $default_color) {\n            if ($type === 'income') {\n                $scope.colors.income = $default_color;\n            }\n            else if ($type === 'expense') {\n                $scope.colors.expense = $default_color;\n            }\n            else if ($type === 'transfer') {\n                $scope.colors.transfer = $default_color;\n            }\n        };\n\n        // =================================allocation=================================\n\n        $scope.showAllocationPopup = function ($transaction) {\n            $scope.show.allocation_popup = true;\n            $scope.allocation_popup = $transaction;\n\n            BudgetsFactory.getAllocationTotals($transaction.id)\n                .then(function (response) {\n                    $scope.allocation_popup.allocation_totals = response.data;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.updateChart = function () {\n            $(\".bar_chart_li:first-child\").css('height', '0%');\n            $(\".bar_chart_li:nth-child(2)\").css('height', '0%');\n            $(\".bar_chart_li:first-child\").css('height', getTotal()[6] + '%');\n            $(\".bar_chart_li:nth-child(2)\").css('height', getTotal()[5] + '%');\n        };\n\n        $scope.toggleFilter = function () {\n            $scope.show.filter = !$scope.show.filter;\n        };\n\n        $scope.closePopup = function ($event, $popup) {\n            var $target = $event.target;\n            if ($target.className === 'popup-outer') {\n                $scope.show.popups[$popup] = false;\n            }\n        };\n\n\n\n\n\n\n\n\n\n\n\n\n        /*==============================quick select of transactions==============================*/\n\n        $(\"body\").on('click', '.mass-delete-checkbox-container', function (event) {\n            var $this = $(this).closest(\"tbody\");\n            var $checked = $(\".checked\");\n            $(\".last-checked\").removeClass(\"last-checked\");\n            $(\".first-checked\").removeClass(\"first-checked\");\n\n            if (event.shiftKey) {\n                var $last_checked = $($checked).last().closest(\"tbody\");\n                var $first_checked = $($checked).first().closest(\"tbody\");\n\n                $($last_checked).addClass(\"last-checked\");\n                $($first_checked).addClass(\"first-checked\");\n                $($this).addClass(\"checked\");\n\n                if ($($this).prevAll(\".last-checked\").length !== 0) {\n                    //$this is after .last-checked\n                    shiftSelect(\"forwards\");\n                }\n                else if ($($this).nextAll(\".last-checked\").length !== 0) {\n                    //$this is before .last-checked\n                    shiftSelect(\"backwards\");\n                }\n            }\n            else if (event.altKey) {\n                $($this).toggleClass('checked');\n            }\n            else {\n                console.log(\"no shift\");\n                $(\".checked\").not($this).removeClass('checked');\n                $($this).toggleClass('checked');\n            }\n        });\n\n        function shiftSelect ($direction) {\n            $(\"#my_results tbody\").each(function () {\n                var $prev_checked_length = $(this).prevAll(\".checked\").length;\n                var $after_checked_length = $(this).nextAll(\".checked\").length;\n                var $after_last_checked = $(this).prevAll(\".last-checked\").length;\n                var $before_first_checked = $(this).nextAll(\".first-checked\").length;\n\n                if ($direction === \"forwards\") {\n                    //if it's after $last_checked and before $this\n                    if ($prev_checked_length !== 0 && $after_checked_length !== 0 && $after_last_checked !== 0) {\n                        $(this).addClass('checked');\n                    }\n                }\n                else if ($direction === \"backwards\") {\n                    if ($prev_checked_length !== 0 && $after_checked_length !== 0 && $before_first_checked !== 0) {\n                        $(this).addClass('checked');\n                    }\n                }\n            });\n        }\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FilterController', filter);\n\n    function filter ($scope, $http, FilterFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.filterFactory = FilterFactory;\n        $scope.accounts = accounts_response;\n        $scope.tags = tags_response;\n        $scope.types = [\"income\", \"expense\", \"transfer\"];\n        $scope.totals = filter_response.totals;\n        $scope.filterTab = 'show';\n        //$scope.loading = true;\n\n        //console.log($scope.loading);\n\n        $scope.resetFilter = function () {\n            FilterFactory.resetFilter();\n        };\n\n        /**\n         * Watches\n         */\n\n        // Not sure why I have to do this in the filter controller,\n        // but $scope.filter wasn't updating otherwise\n        $scope.$watch('filterFactory.filter', function (newValue, oldValue, scope) {\n            if (newValue) {\n                scope.filter = newValue;\n            }\n        });\n\n        $scope.$watch('filterFactory.filter_results.totals', function (newValue, oldValue, scope) {\n            if (newValue) {\n                scope.totals = newValue;\n            }\n        });\n\n        $scope.$watchCollection('filter.tags', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.multiSearch(true);\n        });\n\n        $scope.$watchGroup(['filter.offset', 'filter.num_to_fetch'], function (newValue, oldValue) {\n            $scope.filter.display_from = $scope.filter.offset + 1;\n            $scope.filter.display_to = $scope.filter.offset + ($scope.filter.num_to_fetch * 1);\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.multiSearch(true);\n        });\n\n        /**\n         * End watches\n         */\n\n        $scope.responseError = function (response) {\n            if (response.status === 503) {\n                FeedbackFactory.provideFeedback('Sorry, application under construction. Please try again later.');\n            }\n            else {\n                FeedbackFactory.provideFeedback('There was an error');\n            }\n        };\n\n        $scope.multiSearch = function () {\n            $scope.showLoading();\n            FilterFactory.multiSearch($scope.filter)\n                .then(function (response) {\n                    FilterFactory.updateDataForControllers({filter_results: response.data});\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                    $scope.hideLoading();\n                })\n        };\n\n        //Todo: I might not need some of this code (not allowing offset to be less than 0)\n        // todo: since I disabled the button if that is the case\n        $scope.prevResults = function () {\n            //make it so the offset cannot be less than 0.\n            if ($scope.filter.offset - $scope.filter.num_to_fetch < 0) {\n                $scope.filter.offset = 0;\n            }\n            else {\n                $scope.filter.offset-= ($scope.filter.num_to_fetch * 1);\n            }\n        };\n\n        $scope.nextResults = function () {\n            if ($scope.filter.offset + ($scope.filter.num_to_fetch * 1) > $scope.totals.num_transactions) {\n                //stop it going past the end.\n                return;\n            }\n            $scope.filter.offset+= ($scope.filter.num_to_fetch * 1);\n        };\n\n        $scope.resetSearch = function () {\n            $(\"#search-type-select, #search-account-select, #search-reconciled-select\").val(\"all\");\n            $(\"#single-date-input, #from-date-input, #to-date-input, #search-descriptions-input, #search-merchants-input, #search-tags-input\").val(\"\");\n            $(\"#search-tag-location\").html(\"\");\n            $scope.multiSearch(true);\n        };\n\n        //$(\".clear-search-button\").on('click', function () {\n        //    if ($(this).attr('id') == \"clear-tags-btn\") {\n        //        $search_tag_array.length = 0;\n        //        $(\"#search-tag-location\").html($search_tag_array);\n        //    }\n        //    $(this).closest(\".input-group\").children(\"input\").val(\"\");\n        //    $scope.multiSearch(true);\n        //});\n\n        //$(\"#search-div\").on('click', '#search-tag-location li', function () {\n        //    removeTag(this, $search_tag_array, $(\"#search-tag-location\"), multiSearch);\n        //});\n\n        $scope.filterDescriptionOrMerchant = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.resetOffset();\n            $scope.multiSearch(true);\n        };\n\n        $scope.filterDate = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.multiSearch();\n        };\n\n        $scope.filterTotal = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.multiSearch();\n        };\n\n        /**\n         * Needed for filter\n         * @param $keycode\n         * @param $func\n         * @param $params\n         */\n        //$scope.checkKeycode = function ($keycode, $func, $params) {\n        //    if ($keycode === 13) {\n        //        $func($params);\n        //    }\n        //};\n\n        $scope.clearFilterField = function ($field) {\n            if ($field === 'tags') {\n                $scope.filter.tags = [];\n            }\n            else {\n                $scope.filter[$field] = \"\";\n                $scope.multiSearch();\n            }\n        };\n\n        $scope.resetOffset = function () {\n            $scope.filter.offset = 0;\n        };\n\n        $scope.showContent = function (event) {\n            $(event.target).next().addClass('show-me').removeClass('hide');\n            //$(event.target).next().addClass('animated slideInDown').removeClass('hide');\n        };\n\n        $scope.hideContent = function (event) {\n            $(event.target).next().addClass('hide-me').removeClass('show');\n            //$(event.target).next().addClass('animated slideOutUp').removeClass('show');\n        };\n\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('TransactionsController', transactions);\n\n    function transactions ($scope, $http, TransactionsFactory, FilterFactory, BudgetsFactory, FeedbackFactory) {\n        /**\n         * Scope properties\n         */\n\n        $scope.transactionsFactory = TransactionsFactory;\n        $scope.filterFactory = FilterFactory;\n        $scope.transactions = filter_response.transactions;\n        $scope.tags = tags_response;\n        $scope.accounts = accounts_response;\n\n        /**\n         * Watches\n         */\n\n        $scope.$watch('filterFactory.filter', function (newValue, oldValue, scope) {\n            if (newValue) {\n                scope.filter = newValue;\n            }\n        });\n\n        $scope.$watch('filterFactory.filter_results.transactions', function (newValue, oldValue, scope) {\n            if (newValue) {\n                scope.transactions = newValue;\n            }\n        });\n\n        $scope.responseError = function (response) {\n            if (response.status === 503) {\n                FeedbackFactory.provideFeedback('Sorry, application under construction. Please try again later.');\n            }\n            else {\n                FeedbackFactory.provideFeedback('There was an error');\n            }\n        };\n\n        $scope.updateReconciliation = function ($transaction_id, $reconciliation) {\n            TransactionsFactory.updateReconciliation($transaction_id, $reconciliation, $scope.filter)\n                .then(function (response) {\n                    FilterFactory.updateDataForControllers(response.data);\n                    $scope.totals = response.data;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.updateTransactionSetup = function ($transaction) {\n            $scope.edit_transaction = $transaction;\n            //save the original total so I can calculate\n            // the difference if the total changes,\n            // so I can remove the correct amount from savings if required.\n            $scope.edit_transaction.original_total = $scope.edit_transaction.total;\n            $scope.show.edit_transaction = true;\n        };\n\n        $scope.updateTransaction = function () {\n            var $date_entry = $(\"#edit-transaction-date\").val();\n            $scope.edit_transaction.date.user = $date_entry;\n            $scope.edit_transaction.date.sql = Date.parse($date_entry).toString('yyyy-MM-dd');\n            TransactionsFactory.updateTransaction($scope.edit_transaction, $scope.filter)\n                .then(function (response) {\n                    FilterFactory.updateDataForControllers(response.data);\n                    $scope.provideFeedback('Transaction updated');\n\n                    $scope.show.edit_transaction = false;\n\n                    $scope.totals = response.data;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.fixEditTransactionAccount = function () {\n            //$scope.edit_transaction.account wasn't updating with ng-model, so I'm doing it manually.\n            $account_id = $(\"#edit-transaction-account\").val();\n\n            $account_match = _.find($scope.accounts, function ($account) {\n                return $account.id === $account_id;\n            });\n            $account_name = $account_match.name;\n\n            $scope.edit_transaction.account.id = $account_id;\n            $scope.edit_transaction.account.name = $account_name;\n        };\n\n        $scope.massEditTags = function () {\n            TransactionsFactory.updateMassTags()\n                .then(function (response) {\n                    multiSearch();\n                    $tag_array.length = 0;\n                    $tag_location.html($tag_array);\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.massEditDescription = function () {\n            TransactionsFactory.updateMassDescription()\n                .then(function (response) {\n                    multiSearch();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.updateAllocation = function ($keycode, $type, $value, $tag_id) {\n            if ($keycode === 13) {\n                BudgetsFactory.updateAllocation($type, $value, $scope.allocation_popup.id, $tag_id)\n                    .then(function (response) {\n                        //find the tag in $scope.allocation_popup.tags\n                        var $the_tag = _.find($scope.allocation_popup.tags, function ($tag) {\n                            return $tag.id === $tag_id;\n                        });\n                        //get the index of the tag in $scope.allocation_popup_transaction.tags\n                        var $index = _.indexOf($scope.allocation_popup.tags, $the_tag);\n                        //make the tag equal the ajax response\n                        $scope.allocation_popup.tags[$index] = response.data.allocation_info;\n                        $scope.allocation_popup.allocation_totals = response.data.allocation_totals;\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n        $scope.updateAllocationStatus = function () {\n            BudgetsFactory.updateAllocationStatus($scope.allocation_popup.id, $scope.allocation_popup.allocated)\n                .then(function (response) {\n                    console.log(\"something\");\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.deleteTransaction = function ($transaction) {\n            if (confirm(\"Are you sure?\")) {\n                TransactionsFactory.deleteTransaction($transaction, $scope.filter)\n                    .then(function (response) {\n                        $scope.totals = response.data.totals;\n                        //$scope.calculateAmountToTakeFromSavings($transaction);\n\n                        FilterFactory.updateDataForControllers(response.data);\n\n                        $scope.provideFeedback('Transaction deleted');\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n        //$scope.calculateAmountToTakeFromSavings = function ($transaction) {\n        //    //reverse the automatic insertion into savings if it is an income expense\n        //    if ($transaction.type === 'income') {\n        //        //This value will change. Just for developing purposes.\n        //        var $percent = 10;\n        //        var $amount_to_subtract = $transaction.total / 100 * $percent;\n        //        $scope.reverseAutomaticInsertIntoSavings($amount_to_subtract);\n        //    }\n        //};\n\n        $(\"#mass-delete-button\").on('click', function () {\n            if (confirm(\"You are about to delete \" + $(\".checked\").length + \" transactions. Are you sure you want to do this?\")) {\n                massDelete();\n            }\n        });\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('NewTransactionController', newTransaction);\n\n    function newTransaction ($scope, $http, TransactionsFactory, FilterFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.filterFactory = FilterFactory;\n        $scope.dropdown = {};\n        $scope.me = me;\n        $scope.env = env;\n        $scope.tags = tags_response;\n        $scope.types = [\"income\", \"expense\", \"transfer\"];\n\n        $scope.new_transaction = {\n            type: 'income',\n            account: 1,\n            date: {\n                entered: 'today'\n            },\n            merchant: '',\n            description: '',\n            reconciled: false,\n            multiple_budgets: false,\n            tags: []\n        };\n\n        /**\n         * Fill in the new transaction fields if development environment\n         */\n        if ($scope.env === 'local') {\n            $scope.new_transaction.total = 10;\n            $scope.new_transaction.date.entered = 'today';\n            $scope.new_transaction.merchant = 'some merchant';\n            $scope.new_transaction.description = 'some description';\n            $scope.new_transaction.tags = [\n                //{\n                //    id: '1',\n                //    name: 'insurance',\n                //    //fixed_budget: '10.00',\n                //    //flex_budget: null\n                //},\n                //{\n                //    id: '2',\n                //    name: 'petrol',\n                //    //fixed_budget: null,\n                //    //flex_budget: '5'\n                //}\n            ];\n        }\n\n        $scope.accounts = accounts_response;\n        if ($scope.accounts[0]) {\n            //this if check is to get rid of the error for a new user who does not yet have any accounts.\n            $scope.new_transaction.account = $scope.accounts[0].id;\n            $scope.new_transaction.from_account = $scope.accounts[0].id;\n            $scope.new_transaction.to_account = $scope.accounts[0].id;\n        }\n\n        /**\n         * Watches\n         */\n\n        $scope.$watch('filterFactory.filter', function (newValue, oldValue, scope) {\n            if (newValue) {\n                scope.filter = newValue;\n            }\n        });\n\n        $scope.responseError = function (response) {\n            if (response.status === 503) {\n                FeedbackFactory.provideFeedback('Sorry, application under construction. Please try again later.');\n            }\n            else {\n                FeedbackFactory.provideFeedback('There was an error');\n            }\n        };\n\n        /**\n         * Clear new transaction fields\n         */\n        $scope.clearNewTransactionFields = function () {\n            $scope.new_transaction.tags = [];\n\n            if (me.settings.clear_fields) {\n                $scope.new_transaction.total = '';\n                $scope.new_transaction.description = '';\n                $scope.new_transaction.merchant = '';\n                $scope.new_transaction.reconciled = false;\n                $scope.new_transaction.multiple_budgets = false;\n            }\n        };\n\n        /**\n         * Return true if there are errors.\n         * @returns {boolean}\n         */\n        $scope.anyErrors = function () {\n            $errorCount = 0;\n            var $messages = [];\n\n            if (!Date.parse($scope.new_transaction.date.entered)) {\n                FeedbackFactory.provideFeedback('Date is not valid');\n                $errorCount++;\n            }\n            else {\n                $scope.new_transaction.date.sql = Date.parse($scope.new_transaction.date.entered).toString('yyyy-MM-dd');\n            }\n\n            if ($scope.new_transaction.total === \"\") {\n                FeedbackFactory.provideFeedback('Total is required');\n                $errorCount++;\n            }\n            else if (!$.isNumeric($scope.new_transaction.total)) {\n                FeedbackFactory.provideFeedback('Total is not a valid number');\n                $errorCount++;\n            }\n\n            if ($errorCount > 0) {\n                return true;\n            }\n\n            return false;\n        };\n\n        /**\n         * Insert a new transaction\n         * @param $keycode\n         */\n        $scope.insertTransaction = function ($keycode) {\n            if ($keycode !== 13 || $scope.anyErrors()) {\n                return;\n            }\n\n            TransactionsFactory.insertTransaction($scope.new_transaction, $scope.filter)\n                .then(function (response) {\n                    $scope.provideFeedback('Transaction added');\n                    $scope.clearNewTransactionFields();\n                    $scope.new_transaction.dropdown = false;\n                    FilterFactory.updateDataForControllers(response.data);\n                    $scope.checkNewTransactionForMultipleBudgets(response);\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n         * See if the transaction that was just entered has multiple budgets.\n         * @param response\n         */\n        $scope.checkNewTransactionForMultipleBudgets = function (response) {\n            if (response.data.multiple_budgets) {\n                $scope.allocation_popup = response.data.transaction;\n                $scope.showAllocationPopupForNewTransaction();\n            }\n        };\n\n        $scope.showAllocationPopupForNewTransaction = function () {\n            var $transaction = $scope.findTransaction();\n\n            if ($transaction) {\n                $scope.showAllocationPopup($transaction);\n            }\n            else {\n                //the transaction isn't showing with the current filter settings\n                $scope.showAllocationPopup($scope.allocation_popup);\n            }\n        };\n\n        /**\n         * For the allocation popup when a new transaction is entered.\n         * Find the transaction that was just entered.\n         * This is so that the transaction is updated live\n         * when actions are done in the allocation popup.\n         * Otherwise it will need a page refresh.\n         */\n        $scope.findTransaction = function () {\n            var $transaction = _.find(FilterFactory.filter_results.transactions, function ($scope_transaction) {\n                return $scope_transaction.id === $scope.allocation_popup.id;\n            });\n\n            return $transaction;\n        };\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('PreferencesController', preferences);\n\n    function preferences ($scope, $http, PreferencesFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.preferences = {};\n\n        $scope.responseError = function (response) {\n            if (response.status === 503) {\n                FeedbackFactory.provideFeedback('Sorry, application under construction. Please try again later.');\n            }\n            else {\n                FeedbackFactory.provideFeedback('There was an error');\n            }\n        };\n\n        $scope.savePreferences = function () {\n            PreferencesFactory.savePreferences($scope.me.settings)\n                .then(function (response) {\n                    //$scope. = response.data;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n    }\n\n})();","app.factory('AutocompleteFactory', function ($http) {\n\tvar $object = {};\n\n\t$object.duplicateCheck = function ($this, $transactions_without_duplicates) {\n\t\tvar $duplicate_counter = 0;\n\t\t$($transactions_without_duplicates).each(function () {\n\t\t\tif ($this.description === this.description && $this.merchant === this.merchant && $this.total === this.total && $this.type === this.type && $this.account === this.account) {\n\t\t\t\t//it is a duplicate\n\t\t\t\t$duplicate_counter += 1;\n\t\t\t}\n\t\t});\n\t\tif ($duplicate_counter === 0) {\n\t\t\tvar $allocated_percent = $this.tags.allocated_percent;\n\t\t\tvar $allocated_fixed = null;\n\t\t\tvar $amount = $this.tags.amount;\n\n\t\t\tif ($allocated_percent === null) {\n\t\t\t\t$allocated_fixed = $amount;\n\t\t\t}\n\t\t\t$transactions_without_duplicates.push($this);\n\t\t}\n\t};\n\t$object.removeDuplicates = function ($transactions) {\n\t\t//for the transaction autocomplete\n\t\tfor (var i = 0; i < $transactions.length; i++) {\n\t\t\tvar $transaction = $transactions[i];\n\t\t\tvar $id = $transaction.id;\n\t\t\tvar $description = $transaction.description;\n\t\t\tvar $merchant = $transaction.merchant;\n\t\t\tvar $total = $transaction.total;\n\t\t\tvar $type = $transaction.type;\n\t\t\tvar $account = $transaction.account;\n\t\t\tvar $from_account = $transaction.from_account;\n\t\t\tvar $to_account = $transaction.to_account;\n\n\t\t\tvar $object_1;\n\n\t\t\tif ($type === 'transfer') {\n\t\t\t\t$object_1 = {\n\t\t\t\t\tdescription: $description,\n\t\t\t\t\ttotal: $total,\n\t\t\t\t\tfrom_account: $from_account,\n\t\t\t\t\tto_account: $to_account\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$object_1 = {\n\t\t\t\t\tdescription: $description,\n\t\t\t\t\tmerchant: $merchant,\n\t\t\t\t\ttotal: $total,\n\t\t\t\t\ttype: $type,\n\t\t\t\t\taccount: $account\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//we have the properties that we don't want to be duplicates in an object. now we loop through the array again to make another object, then we can compare if the two objects are equal.\n\t\t\tfor (var j = 0; j < $transactions.length; j++) {\n\t\t\t\tvar $t = $transactions[j];\n\t\t\t\tvar $index = $transactions.indexOf($t);\n\t\t\t\tvar $t_id = $t.id;\n\t\t\t\tvar $t_description = $t.description;\n\t\t\t\tvar $t_merchant = $t.merchant;\n\t\t\t\tvar $t_total = $t.total;\n\t\t\t\tvar $t_type = $t.type;\n\t\t\t\tvar $t_account = $t.account;\n\t\t\t\tvar $t_from_account = $t.from_account;\n\t\t\t\tvar $t_to_account = $t.to_account;\n\n\t\t\t\tvar $object_2 = {};\n\n\t\t\t\tif ($t_id !== $id && $t_type === $type) {\n\t\t\t\t\t//they are the same type, and not the same transaction\n\t\t\t\t\tif ($type === 'transfer') {\n\t\t\t\t\t\t$object_2 = {\n\t\t\t\t\t\t\tdescription: $t_description,\n\t\t\t\t\t\t\ttotal: $t_total,\n\t\t\t\t\t\t\tfrom_account: $t_from_account,\n\t\t\t\t\t\t\tto_account: $t_to_account\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$object_2 = {\n\t\t\t\t\t\t\tdescription: $t_description,\n\t\t\t\t\t\t\tmerchant: $t_merchant,\n\t\t\t\t\t\t\ttotal: $t_total,\n\t\t\t\t\t\t\ttype: $t_type,\n\t\t\t\t\t\t\taccount: $t_account\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (_.isEqual($object_1, $object_2)) {\n\t\t\t\t\t$transactions.splice($index, 1);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $transactions;\n\t};\n\t$object.transferTransactions = function ($transactions) {\n\t\tvar $counter = 0;\n\t\tvar $from_account;\n\t\tvar $to_account;\n\t\tvar $total;\n\t\t\n\t\t$($transactions).each(function () {\n\t\t\tvar $index = $transactions.indexOf(this);\n\t\t\tif (this.type === \"transfer\") {\n\t\t\t\t$counter++;\n\t\t\t\tif (this.total.indexOf(\"-\") != -1) {\n\t\t\t\t\t//this is a negative transfer\n\t\t\t\t\t$from_account = this.account;\n\t\t\t\t}\n\t\t\t\telse if (this.total.indexOf(\"-\") == -1) {\n\t\t\t\t\t//this is a positive transfer\n\t\t\t\t\t$to_account = this.account;\n\t\t\t\t\t$total = this.total;\n\t\t\t\t}\n\t\t\t\tif ($counter % 2 === 1) {\n\t\t\t\t\t//remove every second transfer transaction from the array\n\t\t\t\t\t$transactions.splice($index, 1);\n\t\t\t\t}\n\t\t\t\telse if ($counter % 2 === 0) {\n\t\t\t\t\t//keep the first of every second transfer transaction and combine the two transfers into one\n\t\t\t\t\tthis.from_account = $from_account;\n\t\t\t\t\tthis.to_account = $to_account;\n\t\t\t\t\tthis.account = {};\n\t\t\t\t\t//so the total is positive\n\t\t\t\t\tthis.total = $total;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn $transactions;\n\t};\n\treturn $object;\n});","app.factory('BudgetsFactory', function ($http) {\n\treturn {\n\t\tgetAllocationTotals: function ($transaction_id) {\n\t\t\tvar $url = 'select/allocationTotals';\n\t\t\tvar $data = {\n\t\t\t\ttransaction_id: $transaction_id\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\t\n\t\tupdateBudget: function ($tag, $column, $budget) {\n\t\t\tvar $url = 'update/budget';\n\t\t\tvar $data = {\n\t\t\t\ttag_id: $tag.id,\n\t\t\t\tcolumn: $column,\n\t\t\t\tbudget: $budget\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\n\t\tupdateAllocation: function ($type, $value, $transaction_id, $tag_id) {\n\t\t\tvar $url = 'update/allocation';\n\t\t\tvar $description = 'allocation';\n\t\t\tvar $data = {\n\t\t\t\tdescription: $description,\n\t\t\t\ttype: $type,\n\t\t\t\tvalue: $value,\n\t\t\t\ttransaction_id: $transaction_id,\n\t\t\t\ttag_id: $tag_id\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\tupdateAllocationStatus: function ($transaction_id, $status) {\n\t\t\tvar $url = 'update/allocationStatus';\n\t\t\tvar $data = {\n\t\t\t\ttransaction_id: $transaction_id,\n\t\t\t\tstatus: $status\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\tupdateCSD: function ($tag) {\n            var $url = $tag.path;\n\n            var $data = {\n                tag: $tag,\n                CSD: Date.parse($tag.CSD).toString('yyyy-MM-dd')\n            };\n            \n            return $http.put($url, $data);\n\t\t}\n\t};\n});","app.factory('SavingsFactory', function ($http) {\n\treturn {\n\t\tupdateSavingsTotal: function () {\n\t\t\tvar $amount = $(\"#edited-savings-total\").val().replace(',', '');\n\t\t\tvar $url = 'update/savingsTotal';\n\t\t\tvar $data = {\n\t\t\t\tamount: $amount\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\taddFixedToSavings: function () {\n\t\t\tvar $amount_to_add = $(\"#add-fixed-to-savings\").val();\n\t\t\tvar $url = 'update/addFixedToSavings';\n\t\t\tvar $data = {\n\t\t\t\tamount_to_add: $amount_to_add\n\t\t\t};\n\t\t\t$(\"#add-fixed-to-savings\").val(\"\");\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\taddPercentageToSavings: function () {\n\t\t\tvar $percentage_of_RB = $(\"#add-percentage-to-savings\").val();\n\t\t\tvar $url = 'update/addPercentageToSavings';\n\t\t\tvar $data = {\n\t\t\t\tpercentage_of_RB: $percentage_of_RB,\n\t\t\t};\n\t\t\t$(\"#add-percentage-to-savings\").val(\"\");\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\taddPercentageToSavingsAutomatically: function ($amount_to_add) {\n\t\t\tvar $url = 'update/addPercentageToSavingsAutomatically';\n\t\t\tvar $data = {\n\t\t\t\tamount_to_add: $amount_to_add\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t},\n\t\treverseAutomaticInsertIntoSavings: function ($amount_to_subtract) {\n\t\t\tvar $url = 'update/reverseAutomaticInsertIntoSavings';\n\t\t\tvar $data = {\n\t\t\t\tamount_to_subtract: $amount_to_subtract\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t}\n\t};\n});","app.factory('ColorsFactory', function ($http) {\n\treturn {\n\t\tupdateColors: function ($colors) {\n\t\t\tvar $url = 'update/colors';\n\t\t\tvar $description = 'colors';\n\t\t\tvar $data = {\n\t\t\t\tdescription: $description,\n\t\t\t\tcolors: $colors\n\t\t\t};\n\t\t\t\n\t\t\treturn $http.post($url, $data);\n\t\t}\n\t};\n});\n","app.factory('TransactionsFactory', function ($http) {\n    var $object = {};\n    $object.totals = {};\n\n    $object.insertTransaction = function ($new_transaction, $filter) {\n        var $url = 'insert/transaction';\n        var $description = 'new transaction';\n\n        if ($new_transaction.type === \"expense\" && $new_transaction.total > 0) {\n            //transaction is an expense without the negative sign\n            $new_transaction.total = $new_transaction.total * -1;\n        }\n\n        else if ($new_transaction.type === 'transfer') {\n            $new_transaction.negative_total = $new_transaction.total *-1;\n        }\n\n        var $data = {\n            description: $description,\n            new_transaction: $new_transaction,\n            filter: $filter\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.updateMassTags = function ($tag_array, $url, $tag_location) {\n        var $transaction_id;\n\n        var $tag_id_array = $tag_array.map(function (el) {\n            return el.tag_id;\n        });\n\n        $tag_id_array = JSON.stringify($tag_id_array);\n\n        $(\".checked\").each(function () {\n            $transaction_id = $(this).closest(\"tbody\").attr('id');\n            var $url = 'update/massTags';\n            var $description = 'mass edit tags';\n            var $data = {\n                description: $description,\n                transaction_id: $transaction_id,\n                tag_id_array: $tag_id_array\n            };\n\n            return $http.post($url, $data);\n        });\n    };\n\n    $object.massEditDescription = function () {\n        var $transaction_id;\n        var $description = $(\"#mass-edit-description-input\").val();\n        var $info = {\n            transaction_id: $transaction_id,\n            description: $description\n        };\n\n        $(\".checked\").each(function () {\n            $transaction_id = $(this).closest(\"tbody\").attr('id');\n\n            var $url = 'update/massDescription';\n            var $description = 'mass edit description';\n            var $data = {\n                description: $description,\n                info: $info\n            };\n\n            return $http.post($url, $data);\n        });\n    };\n\n    $object.updateTransaction = function ($transaction, $filter) {\n        var $url = $transaction.path;\n\n        //Make sure total is negative for an expense transaction\n        if ($transaction.type === 'expense' && $transaction.total > 0) {\n            $transaction.total = $transaction.total * -1;\n        }\n\n        var $data = {\n            transaction: $transaction,\n            filter: $filter\n        };\n\n        return $http.put($url, $data);\n    };\n\n    $object.updateReconciliation = function ($transaction_id, $reconciled, $filter) {\n        var $url = 'update/reconciliation';\n\n        if ($reconciled === true) {\n            $reconciled = 'true';\n        }\n        else {\n            $reconciled = 'false';\n        }\n\n        var $data = {\n            id: $transaction_id,\n            reconciled: $reconciled,\n            filter: $filter\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.deleteTransaction = function ($transaction, $filter) {\n        var $url = 'delete/transaction';\n        var $data = {\n            transaction: $transaction,\n            filter: $filter\n        };\n\n        return $http.post($url, $data);\n    };\n\n    $object.massDelete = function () {\n        $(\".checked\").each(function () {\n            deleteTransaction($(this));\n        });\n    };\n\n\treturn $object;\n});\n","app.factory('PreferencesFactory', function ($http) {\n    return {\n        savePreferences: function ($preferences) {\n            var $url = 'update/settings';\n            var $data = $preferences;\n\n            return $http.post($url, $data);\n        },\n        insertOrUpdateDateFormat: function ($new_format) {\n            var $url = 'insert/insertOrUpdateDateFormat';\n            var $data = {\n                new_format: $new_format\n            };\n\n            return $http.post($url, $data);\n        }\n    };\n});","app.factory('TagsFactory', function ($http) {\n    return {\n        getTags: function () {\n            var $url = 'select/tags';\n            var $description = 'tags';\n            var $data = {\n                description: $description\n            };\n\n            return $http.post($url, $data);\n        },\n        duplicateTagCheck: function () {\n            var $url = 'select/duplicate-tag-check';\n            var $description = 'duplicate tag check';\n            var $new_tag_name = $(\"#new-tag-input\").val();\n            var $data = {\n                description: $description,\n                new_tag_name: $new_tag_name\n            };\n\n            return $http.post($url, $data);\n        },\n        countTransactionsWithTag: function ($tag_id) {\n            var $url = 'select/countTransactionsWithTag';\n            var $description = 'count transactions with tag';\n            var $data = {\n                description: $description,\n                tag_id: $tag_id\n            };\n\n            return $http.post($url, $data);\n        },\n\n        /**\n         * Adds a new tag to tags table, not to a transaction\n         * @returns {*}\n         */\n        insertTag: function () {\n            var $url = 'insert/tag';\n            var $description = 'tag';\n            var $new_tag_name = $(\"#new-tag-input\").val();\n            var $data = {\n                description: $description,\n                new_tag_name: $new_tag_name\n            };\n            $(\"#tag-already-created\").hide();\n\n            return $http.post($url, $data);\n        },\n\n        updateTagName: function ($tag_id, $tag_name) {\n            var $url = 'update/tagName';\n            var $description = 'tag name';\n            var $data = {\n                description: $description,\n                tag_id: $tag_id,\n                tag_name: $tag_name\n            };\n\n            return $http.post($url, $data);\n\n        },\n\n        deleteTag: function ($tag_id) {\n            var $url = 'delete/tag';\n            var $description = 'tag';\n            var $data = {\n                description: $description,\n                tag_id: $tag_id\n            };\n\n            return $http.post($url, $data);\n        }\n    };\n});\n","app.factory('AccountsFactory', function ($http) {\n    return {\n        getAccounts: function () {\n            var $url = 'select/accounts';\n            var $description = 'accounts';\n            var $data = {\n                description: $description\n            };\n\n            return $http.post($url, $data);\n        },\n        insertAccount: function () {\n            var $url = 'insert/account';\n            var $description = 'account';\n            var $name = $(\".new_account_input\").val();\n            var $data = {\n                description: $description,\n                name: $name\n            };\n\n            return $http.post($url, $data);\n        },\n        updateAccountName: function ($account_id, $account_name) {\n            var $url = 'update/accountName';\n            var $description = 'account name';\n            var $data = {\n                description: $description,\n                account_id: $account_id,\n                account_name: $account_name\n            };\n\n            return $http.post($url, $data);\n\n        },\n        deleteAccount: function ($account_id) {\n            var $url = 'delete/account';\n            var $description = 'account';\n            var $data = {\n                description: $description,\n                account_id: $account_id\n            };\n\n            return $http.post($url, $data);\n        },\n\n    };\n});","app.factory('FilterFactory', function ($http) {\n    var $object = {};\n\n    $object.resetFilter = function () {\n        $object.filter = {\n            budget: \"all\",\n            total: \"\",\n            types: {\n                in: [],\n                out: []\n            },\n            accounts: {\n                in: [],\n                out: []\n            },\n            single_date: \"\",\n            from_date: \"\",\n            to_date: \"\",\n            description: {\n                in: \"\",\n                out: \"\"\n            },\n            merchant: {\n                in: \"\",\n                out: \"\"\n            },\n            tags: [],\n            reconciled: \"any\",\n            offset: 0,\n            num_to_fetch: 20\n        };\n    };\n\n    $object.resetFilter();\n\n    $object.multiSearch = function ($filter) {\n        $object.filter = $filter;\n\n        if ($filter.single_date) {\n            $filter.single_date_sql = Date.parse($filter.single_date).toString('yyyy-MM-dd');\n        }\n        if ($filter.from_date) {\n            $filter.from_date_sql = Date.parse($filter.from_date).toString('yyyy-MM-dd');\n        }\n        if ($filter.to_date) {\n            $filter.to_date_sql = Date.parse($filter.to_date).toString('yyyy-MM-dd');\n        }\n\n        var $url = 'select/filter';\n        var $data = {\n            description: 'filter',\n            filter: $filter\n        };\n\n        return $http.post($url, $data);\n    };\n\n    /**\n     * For displaying the filtered transactions\n     * and the filter totals\n     * and the non-filter totals on the page\n     * todo: maybe this should be in some totals factory\n     * @param $data\n     */\n    $object.updateDataForControllers = function ($data) {\n        if ($data.filter_results) {\n            //This includes filtered transactions as well as filter totals\n            $object.filter_results = $data.filter_results;\n        }\n        if ($data.totals) {\n            //The non filter totals\n            $object.totals = $data.totals;\n        }\n    };\n\n    return $object;\n});","app.factory('FeedbackFactory', function ($http) {\n    var $object = {};\n\n    $object.provideFeedback = function ($message) {\n        //My watch in my controller would only work once unless I made an object here.\n        //(Just $object.message would not work.)\n        $object.data = {\n            message: $message,\n            update: true\n        };\n        return $object.data;\n    };\n\n    return $object;\n});\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('dropdownsDirective', dropdown);\n\n    /* @inject */\n    function dropdown($parse, $http) {\n        return {\n            restrict: 'EA',\n            //scope: {\n            //    //\"id\": \"@id\",\n            //    //\"selectedObject\": \"=selectedobject\",\n            //    'url': '@url',\n            //    'showPopup': '=show'\n            //},\n            //templateUrl: 'templates/DropdownsTemplate.php',\n            scope: true,\n            link: function($scope, elem, attrs) {\n                $scope.animateIn = attrs.animateIn || 'flipInX';\n                $scope.animateOut = attrs.animateOut || 'flipOutX';\n                var $content = $(elem).find('.dropdown-content');\n\n                $scope.toggleDropdown = function () {\n                    if ($($content).hasClass($scope.animateIn)) {\n                        $scope.hideDropdown();\n                    }\n                    else {\n                        $scope.showDropdown();\n                    }\n                };\n\n                //Todo: Why is this click firing twice?\n                $(\"body\").on('click', function (event) {\n                    if (!elem[0].contains(event.target)) {\n                        $scope.hideDropdown();\n                    }\n                });\n\n                $scope.showDropdown = function () {\n                    $($content)\n                        .css('display', 'flex')\n                        .removeClass($scope.animateOut)\n                        .addClass($scope.animateIn);\n                };\n\n                $scope.hideDropdown = function () {\n                    $($content)\n                        .removeClass($scope.animateIn)\n                        .addClass($scope.animateOut);\n                        //.css('display', 'none');\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('checkbox', checkbox);\n\n    /* @inject */\n    function checkbox() {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"model\": \"=model\",\n                \"id\": \"@id\"\n            },\n            templateUrl: 'checkboxes',\n            link: function($scope, elem, attrs) {\n                $scope.animateIn = attrs.animateIn || 'zoomIn';\n                $scope.animateOut = attrs.animateOut || 'zoomOut';\n                $scope.icon = $(elem).find('.label-icon');\n\n                $scope.toggleIcon = function () {\n                    if (!$scope.model) {\n                        //Input was checked and now it won't be\n                        $scope.hideIcon();\n                    }\n                    else {\n                        //Input was not checked and now it will be\n                        $scope.showIcon();\n                    }\n                };\n\n                $scope.hideIcon = function () {\n                    $($scope.icon).removeClass($scope.animateIn)\n                        .addClass($scope.animateOut);\n                };\n\n                $scope.showIcon = function () {\n                    $($scope.icon).css('display', 'flex')\n                        .removeClass($scope.animateOut)\n                        .addClass($scope.animateIn);\n                };\n\n                //Make the checkbox checked on page load if it should be\n                if ($scope.model === true) {\n                    $scope.showIcon();\n                }\n\n                $scope.$watch('model', function (newValue, oldValue) {\n                    $scope.toggleIcon();\n                });\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('totalsDirective', totals);\n\n    /* @inject */\n    function totals(SavingsFactory, FilterFactory) {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"totals\": \"=totals\",\n                \"provideFeedback\" : \"&providefeedback\"\n            },\n            templateUrl: 'totals-directive',\n            //scope: true,\n            link: function($scope, elem, attrs) {\n                $scope.filterFactory = FilterFactory;\n                $scope.show = {\n                    basic_totals: true,\n                    budget_totals: true\n                };\n\n                $scope.totals.changes = {\n                    RB: [],\n                    RBWEFLB: []\n                };\n\n                $scope.clearChanges = function () {\n                    $scope.totals.changes = {\n                        RB: [],\n                        RBWEFLB: []\n                    };\n                };\n\n                $scope.$watch('filterFactory.totals', function (newValue, oldValue, scope) {\n                    if (newValue) {\n                        scope.totals.basic = newValue.basic;\n                        scope.totals.budget = newValue.budget;\n                    }\n                });\n\n                /**\n                 * Notify user when totals change\n                 */\n\n                //Credit\n                $scope.$watch('totals.basic.credit', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.credit = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //RFB\n                $scope.$watch('totals.budget.FB.totals.remaining', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.RFB = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //CFB\n                $scope.$watch('totals.budget.FB.totals.cumulative_budget', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.CFB = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //EWB\n                $scope.$watch('totals.basic.EWB', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.EWB = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //EFBBSD\n                $scope.$watch('totals.budget.FB.totals.spentBeforeSD', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.EFBBSD = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //EFBASD\n                $scope.$watch('totals.budget.FB.totals.spentAfterSD', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.EFBASD = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //Savings\n                $scope.$watch(' totals.basic.savings', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.savings = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //RB\n                $scope.$watch('totals.budget.RB', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.RB.push(newValue.replace(',', '') - oldValue.replace(',', ''));\n                });\n\n                //RBWEFLB\n                $scope.$watch('totals.budget.RBWEFLB', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.RBWEFLB.push(newValue.replace(',', '') - oldValue.replace(',', ''));\n                });\n\n                //Debit\n                $scope.$watch('totals.basic.debit', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.debit = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //Balance\n                $scope.$watch('totals.basic.balance', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.balance = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                //Reconciled\n                $scope.$watch('totals.basic.reconciled_sum', function (newValue, oldValue) {\n                    if (!oldValue || newValue === oldValue) {\n                        return;\n                    }\n                    $scope.totals.changes.reconciled = newValue.replace(',', '') - oldValue.replace(',', '');\n                });\n\n                $scope.showSavingsTotalInput = function () {\n                    $scope.show.savings_total.input = true;\n                    $scope.show.savings_total.edit_btn = false;\n                };\n            }\n        };\n    }\n}).call(this);\n\n","////File not being used\n//;(function(){\n//    'use strict';\n//    angular\n//        .module('budgetApp')\n//        .directive('filterDirective', filter);\n//\n//    /* @inject */\n//    function filter() {\n//        return {\n//            restrict: 'EA',\n//            scope: {\n//                \"showFilter\": \"=show\",\n//                \"accounts\": \"=accounts\",\n//                \"multiSearch\": \"&search\"\n//            },\n//            templateUrl: 'filter',\n//            //scope: true,\n//            link: function($scope, elem, attrs) {\n//                $scope.resetFilter = function () {\n//                    $scope.filter = {\n//                        budget: \"all\",\n//                        total: \"\",\n//                        types: [],\n//                        accounts: [],\n//                        single_date: \"\",\n//                        from_date: \"\",\n//                        to_date: \"\",\n//                        description: \"\",\n//                        merchant: \"\",\n//                        tags: [],\n//                        reconciled: \"any\",\n//                        offset: 0,\n//                        num_to_fetch: 20\n//                    };\n//                };\n//\n//                $scope.resetFilter();\n//\n//\n//\n//                $scope.$watchCollection('filter.accounts', function (newValue, oldValue) {\n//                    if (newValue === oldValue) {\n//                        return;\n//                    }\n//                    $scope.multiSearch(true);\n//                });\n//            }\n//        };\n//    }\n//}).call(this);\n//\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('tagAutocompleteDirective', tagAutocomplete);\n\n    /* @inject */\n    function tagAutocomplete(FeedbackFactory, $sce) {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"chosenTags\": \"=chosentags\",\n                \"dropdown\": \"=dropdown\",\n                \"tags\": \"=tags\",\n                \"fnOnEnter\": \"&fnonenter\",\n                \"multipleTags\": \"=multipletags\",\n                \"model\": \"=model\",\n                //\"typing\": \"=modelname\",\n                \"id\": \"@id\",\n                \"focusOnEnter\": \"@focusonenter\"\n            },\n            templateUrl: 'tag-autocomplete',\n            link: function($scope, elem, attrs) {\n                $scope.results = {};\n                $scope.messages = {};\n\n                /**\n                 * Check for duplicate tags when adding a new tag to an array\n                 * @param $tag_id\n                 * @param $tag_array\n                 * @returns {boolean}\n                 */\n                $scope.duplicateTagCheck = function ($tag_id, $tag_array) {\n                    for (var i = 0; i < $tag_array.length; i++) {\n                        if ($tag_array[i].id === $tag_id) {\n                            return false; //it is a duplicate\n                        }\n                    }\n                    return true; //it is not a duplicate\n                };\n\n\n                $scope.chooseTag = function ($index) {\n                    if ($index !== undefined) {\n                        //Item was chosen by clicking, not by pressing enter\n                        $scope.currentIndex = $index;\n                    }\n\n                    if ($scope.multipleTags) {\n                        $scope.addTag();\n                    }\n                    else {\n                        $scope.fillField();\n                    }\n                };\n\n                /**\n                 * For if only one tag can be chosen\n                 */\n                $scope.fillField = function () {\n                    $scope.typing = $scope.results[$scope.currentIndex].name;\n                    $scope.model = $scope.results[$scope.currentIndex];\n                    if ($scope.focusOnEnter) {\n                        // Todo: This line doesn't work if tag is chosen with mouse click\n                        $(\"#\" + $scope.focusOnEnter).focus();\n                    }\n                    $scope.hideAndClear();\n                };\n\n                /**\n                 * For if multiple tags can be chosen\n                 */\n                $scope.addTag = function () {\n                    var $tag_id = $scope.results[$scope.currentIndex].id;\n\n                    if (!$scope.duplicateTagCheck($tag_id, $scope.chosenTags)) {\n                        FeedbackFactory.provideFeedback('You have already entered that tag');\n                        $scope.hideAndClear();\n                        return;\n                    }\n\n                    $scope.chosenTags.push($scope.results[$scope.currentIndex]);\n                    $scope.hideAndClear();\n                };\n\n                /**\n                 * Hide the dropdown and clear the input field\n                 */\n                $scope.hideAndClear = function () {\n                    $scope.hideDropdown();\n\n                    if ($scope.multipleTags) {\n                        $scope.typing = '';\n                    }\n\n                    $scope.currentIndex = null;\n                    $('.highlight').removeClass('highlight');\n                };\n\n                $scope.hideDropdown = function () {\n                    $scope.dropdown = false;\n                };\n\n                $scope.highlightLetters = function ($response, $typing) {\n                    $typing = $typing.toLowerCase();\n\n                    for (var i = 0; i < $response.length; i++) {\n                        var $name = $response[i].name;\n                        var $index = $name.toLowerCase().indexOf($typing);\n                        var $substr = $name.substr($index, $typing.length);\n                        var $html = $sce.trustAsHtml($name.replace($substr, '<span class=\"highlight\">' + $substr + '</span>'));\n                        $response[i].html = $html;\n                    }\n                    return $response;\n                };\n\n                $scope.hoverItem = function(index) {\n                    $scope.currentIndex = index;\n                };\n\n                /**\n                 * Act on keypress for input field\n                 * @param $keycode\n                 * @returns {boolean}\n                 */\n                $scope.filterTags = function ($keycode) {\n                    if ($keycode === 13) {\n                        //enter is pressed\n                        //$scope.chooseItem();\n\n                        if (!$scope.results[$scope.currentIndex]) {\n                            //We are not adding a tag. We are inserting the transaction.\n                            $scope.fnOnEnter();\n                            return;\n                        }\n                        //We are choosing a tag\n                        $scope.chooseTag();\n\n                        //resetting the dropdown to show all the tags again after a tag has been added\n                        $scope.results = $scope.tags;\n                    }\n                    else if ($keycode === 38) {\n                        //up arrow is pressed\n                        if ($scope.currentIndex > 0) {\n                            $scope.currentIndex--;\n                        }\n                    }\n                    else if ($keycode === 40) {\n                        //down arrow is pressed\n                        if ($scope.currentIndex + 1 < $scope.results.length) {\n                            $scope.currentIndex++;\n                        }\n                    }\n                    else {\n                        //Not enter, up or down arrow\n                        $scope.currentIndex = 0;\n                        $scope.showDropdown();\n                    }\n                };\n\n                /**\n                 * Todo: when the new budget tag input is focused after entering a budget,\n                 * todo: I don't want the dropdown to show. I had a lot of trouble and need help though.\n                 */\n                $scope.showDropdown = function () {\n                    $scope.dropdown = true;\n                    if ($scope.typing) {\n                        $scope.results = $scope.highlightLetters($scope.searchLocal(), $scope.typing);\n                    }\n                };\n\n                $scope.searchLocal = function () {\n                    var $filtered_tags = _.filter($scope.tags, function ($tag) {\n                        return $tag.name.toLowerCase().indexOf($scope.typing.toLowerCase()) !== -1;\n                    });\n\n                    return $filtered_tags;\n                };\n\n                $scope.removeTag = function ($tag) {\n                    $scope.chosenTags = _.without($scope.chosenTags, $tag);\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('filterDropdownsDirective', filterDropdown);\n\n    /* @inject */\n    function filterDropdown($parse, $http) {\n        return {\n            restrict: 'A',\n            //scope: {\n            //    //\"model\": \"=model\",\n            //    //\"id\": \"@id\"\n            //    \"types\": \"=types\",\n            //    \"path\": \"@path\"\n            //},\n            //templateUrl: 'filter-dropdowns',\n            scope: true,\n            link: function($scope, elem, attrs) {\n                $scope.content = $(elem).find('.content');\n                var $h4 = $(elem).find('h4');\n\n                $($h4).on('click', function () {\n                    $scope.toggleContent();\n                });\n\n                $scope.toggleContent = function () {\n                    if ($scope.contentVisible) {\n                        $scope.hideContent();\n                    }\n                    else {\n                        $scope.showContent();\n                    }\n                };\n\n                $scope.showContent = function () {\n                    $scope.content.slideDown();\n                    $scope.contentVisible = true;\n                };\n\n                $scope.hideContent = function () {\n                    $scope.content.slideUp();\n                    $scope.contentVisible = false;\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('transactionAutocompleteDirective', transactionAutocomplete);\n\n    /* @inject */\n    function transactionAutocomplete(FeedbackFactory, AutocompleteFactory, $sce, $http) {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"dropdown\": \"=dropdown\",\n                \"placeholder\": \"@placeholder\",\n                \"typing\": \"=typing\",\n                \"new_transaction\": \"=newtransaction\",\n                \"fnOnEnter\": \"&fnonenter\"\n            },\n            templateUrl: 'transaction-autocomplete',\n            link: function($scope, elem, attrs) {\n                $scope.results = {};\n\n                /**\n                 * Hide the dropdown and clear the input field\n                 */\n                $scope.hideAndClear = function () {\n                    $scope.hideDropdown();\n                    $scope.currentIndex = null;\n                    $('.highlight').removeClass('highlight');\n                };\n\n                $scope.hideDropdown = function () {\n                    $scope.dropdown = false;\n                };\n\n                $scope.highlightLetters = function ($response, $typing) {\n                    $typing = $typing.toLowerCase();\n\n                    for (var i = 0; i < $response.length; i++) {\n                        var $name = $response[i].name;\n                        var $index = $name.toLowerCase().indexOf($typing);\n                        var $substr = $name.substr($index, $typing.length);\n                        var $html = $sce.trustAsHtml($name.replace($substr, '<span class=\"highlight\">' + $substr + '</span>'));\n                        $response[i].html = $html;\n                    }\n                    return $response;\n                };\n\n                $scope.hoverItem = function(index) {\n                    $scope.currentIndex = index;\n                };\n\n                /**\n                 * Act on keypress for input field\n                 * @param $keycode\n                 * @returns {boolean}\n                 */\n                $scope.filter = function ($keycode) {\n                    if ($keycode === 13) {\n                        //enter is pressed\n                        if (!$scope.results[$scope.currentIndex]) {\n                            //We are not adding a tag. We are inserting the transaction.\n                            $scope.fnOnEnter();\n                            return;\n                        }\n                        //We are adding a tag\n                        $scope.chooseItem();\n\n                        //resetting the dropdown to show all the tags again after a tag has been added\n                        //$scope.results = $scope.tags;\n                    }\n                    else if ($keycode === 38) {\n                        //up arrow is pressed\n                        if ($scope.currentIndex > 0) {\n                            $scope.currentIndex--;\n                        }\n                    }\n                    else if ($keycode === 40) {\n                        //down arrow is pressed\n                        if ($scope.currentIndex + 1 < $scope.results.length) {\n                            $scope.currentIndex++;\n                        }\n                    }\n                    else {\n                        //Not enter, up or down arrow\n                        $scope.currentIndex = 0;\n                        $scope.showDropdown();\n                    }\n                };\n\n                $scope.showDropdown = function () {\n                    $scope.dropdown = true;\n                    $scope.results = $scope.highlightLetters($scope.searchDatabase(), $scope.typing);\n                };\n\n                $scope.searchLocal = function () {\n                    var $results = _.filter($scope.tags, function ($tag) {\n                        return $tag.name.toLowerCase().indexOf($scope.typing.toLowerCase()) !== -1;\n                    });\n\n                    return $results;\n                };\n\n                /**\n                 * Query the database\n                 */\n                $scope.searchDatabase = function () {\n                    var $data = {\n                        typing: $scope.typing,\n                        column: $scope.placeholder\n                    };\n\n                    return $http.post('select/autocompleteTransaction', $data).\n                        success(function(response, status, headers, config) {\n                            //$scope.dealWithResults(response);\n                            $scope.results = response;\n                            $scope.results = AutocompleteFactory.transferTransactions($scope.results);\n                            $scope.results = AutocompleteFactory.removeDuplicates($scope.results);\n                        }).\n                        error(function(data, status, headers, config) {\n                            console.log(\"There was an error\");\n                        });\n                };\n\n                $scope.chooseItem = function ($index) {\n                    if ($index !== undefined) {\n                        //Item was chosen by clicking, not by pressing enter\n                        $scope.currentIndex = $index;\n                    }\n\n                    $scope.selectedItem = $scope.results[$scope.currentIndex];\n\n                    $scope.fillFields();\n\n                    $scope.hideAndClear();\n                };\n\n                $scope.fillFields = function () {\n                    if ($scope.placeholder === 'description') {\n                        $scope.typing = $scope.selectedItem.description;\n                        $scope.new_transaction.merchant = $scope.selectedItem.merchant;\n                    }\n                    else if ($scope.placeholder === 'merchant') {\n                        $scope.typing = $scope.selectedItem.merchant;\n                        $scope.new_transaction.description = $scope.selectedItem.description;\n                    }\n\n                    $scope.new_transaction.total = $scope.selectedItem.total;\n                    $scope.new_transaction.type = $scope.selectedItem.type;\n                    $scope.new_transaction.account = $scope.selectedItem.account.id;\n\n                    if ($scope.selectedItem.from_account && $scope.selectedItem.to_account) {\n                        $scope.new_transaction.from_account = $scope.selectedItem.from_account.id;\n                        $scope.new_transaction.to_account = $scope.selectedItem.to_account.id;\n                    }\n\n                    $scope.new_transaction.tags = $scope.selectedItem.tags;\n                };\n\n            }\n        };\n    }\n}).call(this);\n\n"],"sourceRoot":"/source/"}