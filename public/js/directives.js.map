{"version":3,"sources":["CheckboxesDirective.js","DropdownsDirective.js","FilterDropdownsDirective.js","TagAutocompleteDirective.js","TotalsDirective.js","TransactionAutocompleteDirective.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"directives.js","sourcesContent":[";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('checkbox', checkbox);\n\n    /* @inject */\n    function checkbox() {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"model\": \"=model\",\n                \"id\": \"@id\"\n            },\n            templateUrl: 'checkboxes',\n            link: function($scope, elem, attrs) {\n                $scope.animateIn = attrs.animateIn || 'zoomIn';\n                $scope.animateOut = attrs.animateOut || 'zoomOut';\n                $scope.icon = $(elem).find('.label-icon');\n\n                $scope.toggleIcon = function () {\n                    if (!$scope.model) {\n                        //Input was checked and now it won't be\n                        $scope.hideIcon();\n                    }\n                    else {\n                        //Input was not checked and now it will be\n                        $scope.showIcon();\n                    }\n                };\n\n                $scope.hideIcon = function () {\n                    $($scope.icon).removeClass($scope.animateIn)\n                        .addClass($scope.animateOut);\n                };\n\n                $scope.showIcon = function () {\n                    $($scope.icon).css('display', 'flex')\n                        .removeClass($scope.animateOut)\n                        .addClass($scope.animateIn);\n                };\n\n                //Make the checkbox checked on page load if it should be\n                if ($scope.model === true) {\n                    $scope.showIcon();\n                }\n\n                $scope.$watch('model', function (newValue, oldValue) {\n                    $scope.toggleIcon();\n                });\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('dropdownsDirective', dropdown);\n\n    /* @inject */\n    function dropdown($parse, $http) {\n        return {\n            restrict: 'EA',\n            //scope: {\n            //    //\"id\": \"@id\",\n            //    //\"selectedObject\": \"=selectedobject\",\n            //    'url': '@url',\n            //    'showPopup': '=show'\n            //},\n            //templateUrl: 'templates/DropdownsTemplate.php',\n            scope: true,\n            link: function($scope, elem, attrs) {\n                $scope.animateIn = attrs.animateIn || 'flipInX';\n                $scope.animateOut = attrs.animateOut || 'flipOutX';\n                var $content = $(elem).find('.dropdown-content');\n\n                $scope.toggleDropdown = function () {\n                    if ($($content).hasClass($scope.animateIn)) {\n                        $scope.hideDropdown();\n                    }\n                    else {\n                        $scope.showDropdown();\n                    }\n                };\n\n                //Todo: Why is this click firing twice?\n                $(\"body\").on('click', function (event) {\n                    if (!elem[0].contains(event.target)) {\n                        $scope.hideDropdown();\n                    }\n                });\n\n                $scope.showDropdown = function () {\n                    $($content)\n                        .css('display', 'flex')\n                        .removeClass($scope.animateOut)\n                        .addClass($scope.animateIn);\n                };\n\n                $scope.hideDropdown = function () {\n                    $($content)\n                        .removeClass($scope.animateIn)\n                        .addClass($scope.animateOut);\n                        //.css('display', 'none');\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('filterDropdownsDirective', filterDropdown);\n\n    /* @inject */\n    function filterDropdown($parse, $http) {\n        return {\n            restrict: 'A',\n            //scope: {\n            //    //\"model\": \"=model\",\n            //    //\"id\": \"@id\"\n            //    \"types\": \"=types\",\n            //    \"path\": \"@path\"\n            //},\n            //templateUrl: 'filter-dropdowns',\n            scope: true,\n            link: function($scope, elem, attrs) {\n                $scope.content = $(elem).find('.content');\n                var $h4 = $(elem).find('h4');\n\n                $($h4).on('click', function () {\n                    $scope.toggleContent();\n                });\n\n                $scope.toggleContent = function () {\n                    if ($scope.contentVisible) {\n                        $scope.hideContent();\n                    }\n                    else {\n                        $scope.showContent();\n                    }\n                };\n\n                $scope.showContent = function () {\n                    $scope.content.slideDown();\n                    $scope.contentVisible = true;\n                };\n\n                $scope.hideContent = function () {\n                    $scope.content.slideUp();\n                    $scope.contentVisible = false;\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('tagAutocompleteDirective', tagAutocomplete);\n\n    /* @inject */\n    function tagAutocomplete($sce) {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"chosenTags\": \"=chosentags\",\n                \"dropdown\": \"=dropdown\",\n                \"tags\": \"=tags\",\n                \"fnOnEnter\": \"&fnonenter\",\n                \"multipleTags\": \"=multipletags\",\n                \"model\": \"=model\",\n                //\"typing\": \"=modelname\",\n                \"id\": \"@id\",\n                \"focusOnEnter\": \"@focusonenter\"\n            },\n            templateUrl: 'tag-autocomplete',\n            link: function($scope, elem, attrs) {\n                $scope.results = {};\n                $scope.messages = {};\n                //$scope.dropdown = true;\n\n                /**\n                 * Check for duplicate tags when adding a new tag to an array\n                 * @param $tag_id\n                 * @param $tag_array\n                 * @returns {boolean}\n                 */\n                $scope.duplicateTagCheck = function ($tag_id, $tag_array) {\n                    for (var i = 0; i < $tag_array.length; i++) {\n                        if ($tag_array[i].id === $tag_id) {\n                            return false; //it is a duplicate\n                        }\n                    }\n                    return true; //it is not a duplicate\n                };\n\n\n                $scope.chooseTag = function ($index) {\n                    if ($index !== undefined) {\n                        //Item was chosen by clicking, not by pressing enter\n                        $scope.currentIndex = $index;\n                    }\n\n                    if ($scope.multipleTags) {\n                        $scope.addTag();\n                    }\n                    else {\n                        $scope.fillField();\n                    }\n                };\n\n                /**\n                 * For if only one tag can be chosen\n                 */\n                $scope.fillField = function () {\n                    $scope.typing = $scope.results[$scope.currentIndex].name;\n                    $scope.model = $scope.results[$scope.currentIndex];\n                    if ($scope.focusOnEnter) {\n                        // Todo: This line doesn't work if tag is chosen with mouse click\n                        $(\"#\" + $scope.focusOnEnter).focus();\n                    }\n                    $scope.hideAndClear();\n                };\n\n                /**\n                 * For if multiple tags can be chosen\n                 */\n                $scope.addTag = function () {\n                    var $tag_id = $scope.results[$scope.currentIndex].id;\n\n                    if (!$scope.duplicateTagCheck($tag_id, $scope.chosenTags)) {\n                        //$scope.provideFeedback('You have already entered that tag');\n                        $scope.hideAndClear();\n                        return;\n                    }\n\n                    $scope.chosenTags.push($scope.results[$scope.currentIndex]);\n                    $scope.hideAndClear();\n                };\n\n                /**\n                 * Hide the dropdown and clear the input field\n                 */\n                $scope.hideAndClear = function () {\n                    $scope.hideDropdown();\n\n                    if ($scope.multipleTags) {\n                        $scope.typing = '';\n                    }\n\n                    $scope.currentIndex = null;\n                    $('.highlight').removeClass('highlight');\n                };\n\n                $scope.hideDropdown = function () {\n                    $scope.dropdown = false;\n                };\n\n                $scope.highlightLetters = function ($response, $typing) {\n                    $typing = $typing.toLowerCase();\n\n                    for (var i = 0; i < $response.length; i++) {\n                        var $name = $response[i].name;\n                        var $index = $name.toLowerCase().indexOf($typing);\n                        var $substr = $name.substr($index, $typing.length);\n\n                        var $html = $sce.trustAsHtml($name.replace($substr, '<span class=\"highlight\">' + $substr + '</span>'));\n                        $response[i].html = $html;\n                    }\n\n                    return $response;\n                };\n\n                $scope.hoverItem = function(index) {\n                    $scope.currentIndex = index;\n                };\n\n                /**\n                 * Act on keypress for input field\n                 * @param $keycode\n                 * @returns {boolean}\n                 */\n                $scope.filterTags = function ($keycode) {\n                    if ($keycode === 13) {\n                        //enter is pressed\n                        //$scope.chooseItem();\n\n                        if (!$scope.results[$scope.currentIndex]) {\n                            //We are not adding a tag. We are inserting the transaction.\n                            $scope.fnOnEnter();\n                            return;\n                        }\n                        //We are choosing a tag\n                        $scope.chooseTag();\n\n                        //resetting the dropdown to show all the tags again after a tag has been added\n                        $scope.results = $scope.tags;\n                    }\n                    else if ($keycode === 38) {\n                        //up arrow is pressed\n                        if ($scope.currentIndex > 0) {\n                            $scope.currentIndex--;\n                        }\n                    }\n                    else if ($keycode === 40) {\n                        //down arrow is pressed\n                        if ($scope.currentIndex + 1 < $scope.results.length) {\n                            $scope.currentIndex++;\n                        }\n                    }\n                    else {\n                        //Not enter, up or down arrow\n                        $scope.currentIndex = 0;\n                        $scope.showDropdown();\n                    }\n                };\n\n                /**\n                 * Todo: when the new budget tag input is focused after entering a budget,\n                 * todo: I don't want the dropdown to show. I had a lot of trouble and need help though.\n                 */\n                $scope.showDropdown = function () {\n                    $scope.dropdown = true;\n                    if ($scope.typing) {\n                        $scope.results = $scope.highlightLetters($scope.searchLocal(), $scope.typing);\n                    }\n                };\n\n                $scope.searchLocal = function () {\n                    var $filtered_tags = _.filter($scope.tags, function ($tag) {\n                        return $tag.name.toLowerCase().indexOf($scope.typing.toLowerCase()) !== -1;\n                    });\n\n                    return $filtered_tags;\n                };\n\n                $scope.removeTag = function ($tag) {\n                    $scope.chosenTags = _.without($scope.chosenTags, $tag);\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('totalsDirective', totals);\n\n    /* @inject */\n    function totals(SavingsFactory, FilterFactory) {\n        return {\n            restrict: 'EA',\n            scope: {\n                //\"totals\": \"=totals\",\n                \"sideBarTotals\": \"=sidebartotals\",\n                \"totalsLoading\": \"=totalsloading\",\n                //\"basicTotals\": \"=basictotals\",\n                //\"fixedBudgetTotals\": \"=fixedbudgettotals\",\n                //\"flexBudgetTotals\": \"=flexbudgettotals\",\n                //\"remainingBalance\": \"=remainingbalance\",\n                \"totalChanges\": \"=totalchanges\",\n                \"provideFeedback\" : \"&providefeedback\",\n                \"show\": \"=show\"\n            },\n            //template: $('script#totals').html(),\n            templateUrl: '/totals-directive',\n            //scope: true,\n            link: function($scope, elem, attrs) {\n\n                $scope.$watch('sideBarTotals', function (newValue, oldValue, scope) {\n\n                    if (newValue && oldValue) {\n\n                        if (newValue.credit !== oldValue.credit) {\n                            $scope.totalChanges.credit = $scope.calculateDifference(newValue.credit, oldValue.credit);\n                        }\n\n                        if (newValue.debit !== oldValue.debit) {\n                            $scope.totalChanges.debit = $scope.calculateDifference(newValue.debit, oldValue.debit);\n                        }\n\n                        if (newValue.balance !== oldValue.balance) {\n                            $scope.totalChanges.balance = $scope.calculateDifference(newValue.balance, oldValue.balance);\n                        }\n\n                        if (newValue.reconciledSum !== oldValue.reconciledSum) {\n                            $scope.totalChanges.reconciledSum = $scope.calculateDifference(newValue.reconciledSum, oldValue.reconciledSum);\n                        }\n\n                        if (newValue.savings !== oldValue.savings) {\n                            $scope.totalChanges.savings = $scope.calculateDifference(newValue.savings, oldValue.savings);\n                        }\n\n                        if (newValue.expensesWithoutBudget !== oldValue.expensesWithoutBudget) {\n                            $scope.totalChanges.expensesWithoutBudget = $scope.calculateDifference(newValue.expensesWithoutBudget, oldValue.expensesWithoutBudget);\n                        }\n\n                        if (newValue.remainingFixedBudget !== oldValue.remainingFixedBudget) {\n                            $scope.totalChanges.remainingFixedBudget = $scope.calculateDifference(newValue.remainingFixedBudget, oldValue.remainingFixedBudget);\n                        }\n\n                        if (newValue.cumulativeFixedBudget !== oldValue.cumulativeFixedBudget) {\n                            $scope.totalChanges.cumulativeFixedBudget = $scope.calculateDifference(newValue.cumulativeFixedBudget, oldValue.cumulativeFixedBudget);\n                        }\n\n                        if (newValue.expensesWithFixedBudgetBeforeStartingDate !== oldValue.expensesWithFixedBudgetBeforeStartingDate) {\n                            $scope.totalChanges.expensesWithFixedBudgetBeforeStartingDate = $scope.calculateDifference(newValue.expensesWithFixedBudgetBeforeStartingDate, oldValue.expensesWithFixedBudgetBeforeStartingDate);\n                        }\n\n                        if (newValue.expensesWithFixedBudgetAfterStartingDate !== oldValue.expensesWithFixedBudgetAfterStartingDate) {\n                            $scope.totalChanges.expensesWithFixedBudgetAfterStartingDate = $scope.calculateDifference(newValue.expensesWithFixedBudgetAfterStartingDate, oldValue.expensesWithFixedBudgetAfterStartingDate);\n                        }\n\n                        if (newValue.expensesWithFlexBudgetBeforeStartingDate !== oldValue.expensesWithFlexBudgetBeforeStartingDate) {\n                            $scope.totalChanges.expensesWithFlexBudgetBeforeStartingDate = $scope.calculateDifference(newValue.expensesWithFlexBudgetBeforeStartingDate, oldValue.expensesWithFlexBudgetBeforeStartingDate);\n                        }\n\n                        if (newValue.expensesWithFlexBudgetAfterStartingDate !== oldValue.expensesWithFlexBudgetAfterStartingDate) {\n                            $scope.totalChanges.expensesWithFlexBudgetAfterStartingDate = $scope.calculateDifference(newValue.expensesWithFlexBudgetAfterStartingDate, oldValue.expensesWithFlexBudgetAfterStartingDate);\n                        }\n\n                        if (newValue.remainingBalance !== oldValue.remainingBalance) {\n                            $scope.totalChanges.remainingBalance = $scope.calculateDifference(newValue.remainingBalance, oldValue.remainingBalance);\n                        }\n\n                        scope.sideBarTotals = newValue;\n                    }\n                });\n\n                /**\n                 * End watches\n                 */\n\n                /**\n                 * @param newValue\n                 * @param oldValue\n                 * @returns {string}\n                 */\n                $scope.calculateDifference = function (newValue, oldValue) {\n                    var $diff = newValue - oldValue;\n                    return $diff.toFixed(2);\n                };\n\n                $scope.showSavingsTotalInput = function () {\n                    $scope.show.savings_total.input = true;\n                    $scope.show.savings_total.edit_btn = false;\n                };\n            }\n        };\n    }\n}).call(this);\n\n",";(function(){\n    'use strict';\n    angular\n        .module('budgetApp')\n        .directive('transactionAutocompleteDirective', transactionAutocomplete);\n\n    /* @inject */\n    function transactionAutocomplete(AutocompleteFactory, $sce, $http, $interval) {\n        return {\n            restrict: 'EA',\n            scope: {\n                \"dropdown\": \"=dropdown\",\n                \"placeholder\": \"@placeholder\",\n                \"typing\": \"=typing\",\n                \"new_transaction\": \"=newtransaction\",\n                \"fnOnEnter\": \"&fnonenter\",\n                \"showLoading\": \"&showloading\",\n                \"hideLoading\": \"&hideloading\",\n                \"loading\": \"=loading\"\n            },\n            templateUrl: 'transaction-autocomplete',\n            link: function($scope, elem, attrs) {\n                $scope.results = {};\n\n                /**\n                 * Hide the dropdown and clear the input field\n                 */\n                $scope.hideAndClear = function () {\n                    $scope.hideDropdown();\n                    $scope.currentIndex = null;\n                    $('.highlight').removeClass('highlight');\n                };\n\n                $scope.hideDropdown = function () {\n                    $scope.dropdown = false;\n                };\n\n                $scope.highlightLetters = function ($response, $typing) {\n                    $typing = $typing.toLowerCase();\n\n                    for (var i = 0; i < $response.length; i++) {\n                        var $name = $response[i].name;\n                        var $index = $name.toLowerCase().indexOf($typing);\n                        var $substr = $name.substr($index, $typing.length);\n\n                        var $html = $sce.trustAsHtml($name.replace($substr, '<span class=\"highlight\">' + $substr + '</span>'));\n\n                        $response[i].html = $html;\n                    }\n                    return $response;\n                };\n\n                $scope.hoverItem = function(index) {\n                    $scope.currentIndex = index;\n                };\n\n                /**\n                 * Act on keypress for input field\n                 * @param $keycode\n                 * @returns {boolean}\n                 */\n                $scope.filter = function ($keycode) {\n                    if ($keycode === 13) {\n                        //enter is pressed\n                        if (!$scope.results[$scope.currentIndex]) {\n                            //We are not adding a tag. We are inserting the transaction.\n                            $scope.fnOnEnter();\n                            return;\n                        }\n                        //We are adding a tag\n                        $scope.chooseItem();\n\n                        //resetting the dropdown to show all the tags again after a tag has been added\n                        //$scope.results = $scope.tags;\n                    }\n                    else if ($keycode === 38) {\n                        //up arrow is pressed\n                        if ($scope.currentIndex > 0) {\n                            $scope.currentIndex--;\n                        }\n                    }\n                    else if ($keycode === 40) {\n                        //down arrow is pressed\n                        if ($scope.currentIndex + 1 < $scope.results.length) {\n                            $scope.currentIndex++;\n                        }\n                    }\n                    else {\n                        //Not enter, up or down arrow\n                        $scope.startCounting();\n                        $scope.currentIndex = 0;\n                        $scope.showDropdown();\n                    }\n                };\n\n                $scope.startCounting = function () {\n                    $interval.cancel($scope.interval);\n                    $scope.timeSinceKeyPress = 0;\n                    $scope.interval = $interval(function () {\n                        $scope.timeSinceKeyPress++;\n                        $scope.showDropdown();\n                    }, 500);\n                };\n\n                $scope.showDropdown = function () {\n                    $scope.dropdown = true;\n\n                    if ($scope.timeSinceKeyPress > 1) {\n                        $scope.results = $scope.highlightLetters($scope.searchDatabase(), $scope.typing);\n                        $interval.cancel($scope.interval);\n                    }\n                };\n\n                $scope.searchLocal = function () {\n                    var $results = _.filter($scope.tags, function ($tag) {\n                        return $tag.name.toLowerCase().indexOf($scope.typing.toLowerCase()) !== -1;\n                    });\n\n                    return $results;\n                };\n\n                //var $responseNum = 0;\n\n                /**\n                 * Query the database\n                 */\n                $scope.searchDatabase = function () {\n                    $scope.showLoading();\n                    var $data = {\n                        typing: $scope.typing,\n                        column: $scope.placeholder\n                    };\n\n                    return $http.post('/api/autocomplete/transaction', $data).\n                        success(function(response, status, headers, config) {\n                            $scope.results = AutocompleteFactory.transferTransactions(response);\n                            $scope.results = AutocompleteFactory.removeDuplicates($scope.results);\n                            $scope.hideLoading();\n                        }).\n                        error(function(data, status, headers, config) {\n                            console.log(\"There was an error\");\n                        });\n                };\n\n                $scope.chooseItem = function ($index) {\n                    if ($index !== undefined) {\n                        //Item was chosen by clicking, not by pressing enter\n                        $scope.currentIndex = $index;\n                    }\n\n                    $scope.selectedItem = $scope.results[$scope.currentIndex];\n\n                    $scope.fillFields();\n\n                    $scope.hideAndClear();\n                };\n\n                $scope.fillFields = function () {\n                    if ($scope.placeholder === 'description') {\n                        $scope.typing = $scope.selectedItem.description;\n                        $scope.new_transaction.merchant = $scope.selectedItem.merchant;\n                    }\n                    else if ($scope.placeholder === 'merchant') {\n                        $scope.typing = $scope.selectedItem.merchant;\n                        $scope.new_transaction.description = $scope.selectedItem.description;\n                    }\n\n                    $scope.new_transaction.total = $scope.selectedItem.total;\n                    $scope.new_transaction.type = $scope.selectedItem.type;\n                    $scope.new_transaction.account_id = $scope.selectedItem.account.id;\n\n                    if ($scope.selectedItem.from_account && $scope.selectedItem.to_account) {\n                        $scope.new_transaction.from_account_id = $scope.selectedItem.from_account.id;\n                        $scope.new_transaction.to_account_id = $scope.selectedItem.to_account.id;\n                    }\n\n                    $scope.new_transaction.budgets = $scope.selectedItem.budgets;\n                };\n\n            }\n        };\n    }\n}).call(this);\n\n"],"sourceRoot":"/source/"}