{"version":3,"sources":["AccountsController.js","BudgetsController.js","FilterController.js","FixedBudgetsController.js","FlexBudgetsController.js","HelpController.js","HomeController.js","NewTransactionController.js","PreferencesController.js","TransactionsController.js","UnassignedBudgetsController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChxrhztHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controllers.js","sourcesContent":["var app = angular.module('budgetApp');\n\n(function () {\n\n    app.controller('AccountsController', function ($scope, $http, AccountsFactory) {\n\n        $scope.accounts = accounts;\n        $scope.edit_account_popup = {};\n\n        $scope.insertAccount = function ($keycode) {\n            if ($keycode !== 13) {\n                return;\n            }\n\n            $scope.showLoading();\n            AccountsFactory.insertAccount()\n                .then(function (response) {\n                    $scope.accounts.push(response.data);\n                    $scope.provideFeedback('Account added');\n                    $(\"#new_account_input\").val(\"\");\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.showEditAccountPopup = function ($account) {\n            $scope.edit_account_popup = $account;\n            $scope.show.popups.edit_account = true;\n        };\n\n        $scope.updateAccount = function () {\n            $scope.showLoading();\n            AccountsFactory.updateAccountName($scope.edit_account_popup)\n                .then(function (response) {\n                    var $index = _.indexOf($scope.accounts, _.findWhere($scope.accounts, {id: $scope.edit_account_popup.id}));\n                    $scope.accounts[$index] = response.data;\n                    $scope.provideFeedback('Account edited');\n                    $scope.show.popups.edit_account = false;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.deleteAccount = function ($account) {\n            if (confirm(\"Are you sure you want to delete this account?\")) {\n                $scope.showLoading();\n                AccountsFactory.deleteAccount($account)\n                    .then(function (response) {\n                        $scope.accounts = _.without($scope.accounts, $account);\n                        $scope.provideFeedback('Account deleted');\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n    });\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('BudgetsController', budgets);\n\n    function budgets ($scope, BudgetsFactory, TotalsFactory) {\n\n        $scope.toggleNewBudget = function () {\n            $scope.show.newBudget = true;\n        };\n\n        if (typeof fixedBudgets !== 'undefined') {\n            $scope.fixedBudgets = fixedBudgets;\n        }\n\n        if (typeof flexBudgets !== 'undefined') {\n            $scope.flexBudgets = flexBudgets;\n        }\n\n        if (typeof unassignedBudgets !== 'undefined') {\n            $scope.unassignedBudgets = unassignedBudgets;\n        }\n\n        if (page === 'fixedBudgets') {\n            $scope.fixedBudgetTotals = fixedBudgetTotals;\n\n            $scope.getFixedBudgetTotals = function () {\n                $scope.showLoading();\n                TotalsFactory.getFixedBudgetTotals()\n                    .then(function (response) {\n                        $scope.fixedBudgetTotals = response.data;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            };\n        }\n\n        else if (page === 'flexBudgets') {\n            $scope.flexBudgetTotals = flexBudgetTotals;\n\n            $scope.getFlexBudgetTotals = function () {\n                $scope.showLoading();\n                TotalsFactory.getFlexBudgetTotals()\n                    .then(function (response) {\n                        $scope.flexBudgetTotals = response.data;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            };\n        }\n\n        $scope.show.basic_totals = true;\n        $scope.show.budget_totals = true;\n        $scope.newBudget = {\n            type: 'fixed'\n        };\n\n        $scope.insertBudget = function ($keycode) {\n            if ($keycode !== 13) {\n                return;\n            }\n\n            var $budget = $scope.newBudget;\n\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            $budget.sql_starting_date = $scope.formatDate($budget.starting_date);\n            BudgetsFactory.insert($budget)\n                .then(function (response) {\n                    jsInsertBudget(response);\n                    $scope.getSideBarTotals();\n                    $scope.provideFeedback('Budget created');\n\n                    if ($budget.type === 'fixed' && page === 'fixedBudgets') {\n                        $scope.getFixedBudgetTotals();\n                    }\n                    else if ($budget.type === 'flex' && page === 'flexBudgets') {\n                        $scope.getFlexBudgetTotals();\n                    }\n\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n        * Add the budget to the JS array\n        */\n        function jsInsertBudget (response) {\n            var $budget = response.data.data;\n            if ($budget.type === 'fixed' && page === 'fixedBudgets') {\n                $scope.fixedBudgets.push($budget);\n            }\n            else if ($budget.type === 'flex' && page === 'flexBudgets') {\n                $scope.flexBudgets.push($budget);\n            }\n            else if ($budget.type === 'unassigned' && page === 'unassignedBudgets') {\n                $scope.unassignedBudgets.push($budget);\n            }\n        }\n\n        /**\n        * For updating budget (name, type, amount, starting date) for an existing budget\n        */\n        $scope.updateBudget = function () {\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            $scope.budget_popup.sqlStartingDate = $scope.formatDate($scope.budget_popup.formattedStartingDate);\n            BudgetsFactory.update($scope.budget_popup)\n                .then(function (response) {\n                    jsUpdateBudget(response);\n                    $scope.getSideBarTotals();\n                    $scope.show.popups.budget = false;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        function jsUpdateBudget (response) {\n            //todo: allow for if budget type is changed. I will have to remove the budget from the table it was in\n            var $budget = response.data;\n            if ($budget.type === 'flex') {\n                var $index = _.indexOf($scope.flexBudgets, _.findWhere($scope.flexBudgets, {id: response.data.id}));\n                $scope.flexBudgets[$index] = response.data;\n            }\n            else if ($budget.type === 'fixed') {\n                var $index = _.indexOf($scope.fixedBudgets, _.findWhere($scope.fixedBudgets, {id: response.data.id}));\n                $scope.fixedBudgets[$index] = response.data;\n            }\n        }\n\n        $scope.deleteBudget = function ($budget) {\n            $scope.showLoading();\n            if (confirm('You have ' + $budget.transactionsCount + ' transactions with this budget. Are you sure you want to delete it?')) {\n                $scope.showLoading();\n                BudgetsFactory.destroy($budget)\n                    .then(function (response) {\n                        $scope.getSideBarTotals();\n                        jsDeleteBudget($budget);\n                        $scope.hideLoading();\n                        $scope.provideFeedback('Budget deleted');\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n            else {\n                $scope.hideLoading();\n            }\n        };\n\n        function jsDeleteBudget ($budget) {\n            var $index;\n\n            if ($budget.type === 'fixed') {\n                $index = _.indexOf($scope.fixedBudgets, _.findWhere($scope.fixedBudgets, {id: $budget.id}));\n                $scope.fixedBudgets = _.without($scope.fixedBudgets, $budget);\n            }\n            else if ($budget.type === 'flex') {\n                $index = _.indexOf($scope.flexBudgets, _.findWhere($scope.flexBudgets, {id: $budget.id}));\n                $scope.flexBudgets = _.without($scope.flexBudgets, $budget);\n            }\n            else if ($budget.type === 'unassigned') {\n                $index = _.indexOf($scope.unassignedBudgets, _.findWhere($scope.unassignedBudgets, {id: $budget.id}));\n                $scope.unassignedBudgets = _.without($scope.unassignedBudgets, $budget);\n            }\n        }\n\n        $scope.showBudgetPopup = function ($tag, $type) {\n            $scope.budget_popup = $tag;\n            $scope.budget_popup.type = $type;\n            $scope.show.popups.budget = true;\n        };\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FilterController', filter);\n\n    function filter ($scope, FilterFactory) {\n\n        $scope.filterFactory = FilterFactory;\n        $scope.types = [\"income\", \"expense\", \"transfer\"];\n        $scope.filterTab = 'show';\n\n        //$scope.resetFilter = function () {\n        //    FilterFactory.resetFilter();\n        //};\n\n        /**\n         * Watches\n         */\n\n        //$scope.$watch('filterFactory.filter_results.graph_totals', function (newValue, oldValue, scope) {\n        //    if (newValue) {\n        //        //This is running many times when it shouldn't\n        //        scope.graph_totals = newValue;\n        //        $scope.calculateGraphFigures();\n        //    }\n        //});\n\n        $scope.$watchCollection('filter.budgets.in.and', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.runFilter();\n        });\n\n        $scope.$watchCollection('filter.budgets.in.or', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.runFilter();\n        });\n\n        $scope.$watchCollection('filter.budgets.out', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.runFilter();\n        });\n\n        //Todo: I might not need some of this code (not allowing offset to be less than 0)\n        // todo: since I disabled the button if that is the case\n        $scope.prevResults = function () {\n            //make it so the offset cannot be less than 0.\n            if ($scope.filter.offset - $scope.filter.num_to_fetch < 0) {\n                $scope.filter.offset = 0;\n            }\n            else {\n                $scope.filter.offset-= ($scope.filter.num_to_fetch * 1);\n                updateRange();\n                $scope.runFilter();\n            }\n        };\n\n        /**\n         * Updates filter.display_from and filter.display_to values\n         */\n        function updateRange () {\n            $scope.filter.display_from = $scope.filter.offset + 1;\n            $scope.filter.display_to = $scope.filter.offset + ($scope.filter.num_to_fetch * 1);\n        }\n\n        $scope.changeNumToFetch = function () {\n            updateRange();\n            $scope.runFilter();\n        };\n\n        $scope.nextResults = function () {\n            if ($scope.filter.offset + ($scope.filter.num_to_fetch * 1) > $scope.filterTotals.numTransactions) {\n                //stop it going past the end.\n                return;\n            }\n\n            $scope.filter.offset+= ($scope.filter.num_to_fetch * 1);\n            updateRange();\n            $scope.runFilter();\n        };\n\n        $scope.resetSearch = function () {\n            $(\"#search-type-select, #search-account-select, #search-reconciled-select\").val(\"all\");\n            $(\"#single-date-input, #from-date-input, #to-date-input, #search-descriptions-input, #search-merchants-input, #search-tags-input\").val(\"\");\n            $(\"#search-tag-location\").html(\"\");\n            $scope.filter(true);\n        };\n\n        $scope.filterDescriptionOrMerchant = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.resetOffset();\n            $scope.runFilter(true);\n        };\n\n        $scope.filterDate = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.runFilter();\n        };\n\n        $scope.filterTotal = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.runFilter();\n        };\n\n        /**\n         * $type is either 'in' or 'out'\n         * @param $field\n         * @param $type\n         */\n        $scope.clearFilterField = function ($field, $type) {\n            $scope.filter[$field][$type] = \"\";\n            $scope.runFilter();\n        };\n\n        /**\n         * $type1 is 'in' or 'out'.\n         * $type2 is 'and' or 'or'.\n         * @param $type1\n         * @param $type2\n         */\n        $scope.clearTagField = function ($type1, $type2) {\n            if ($type2) {\n                $scope.filter.budgets[$type1][$type2] = [];\n            }\n            else {\n                $scope.filter.budgets[$type1] = [];\n            }\n        };\n\n        /**\n         * $type is either 'in' or 'out'\n         * @param $field\n         * @param $type\n         */\n        $scope.clearDateField = function ($field, $type) {\n            $scope.filter[$field][$type]['user'] = \"\";\n            $scope.runFilter();\n        };\n\n        $scope.resetOffset = function () {\n            $scope.filter.offset = 0;\n        };\n\n        $scope.showContent = function (event) {\n            $(event.target).next().addClass('show-me').removeClass('hide');\n        };\n\n        $scope.hideContent = function (event) {\n            $(event.target).next().addClass('hide-me').removeClass('show');\n        };\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FixedBudgetsController', fixedBudgets);\n\n    function fixedBudgets ($scope, TotalsFactory) {\n\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FlexBudgetsController', flexBudgets);\n\n    function flexBudgets ($scope) {\n\n\n    }\n\n})();","var app = angular.module('budgetApp');\n\n(function () {\n\n    app.controller('HelpController', function ($scope) {\n\n\n\n    }); //end controller\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('HomeController', home);\n\n    function home ($scope, TransactionsFactory, FilterFactory) {\n\n        $scope.transactionsFactory = TransactionsFactory;\n        $scope.page = 'home';\n        $scope.budgets = budgets;\n        $scope.colors = me.preferences.colors;\n\n        if (env === 'local') {\n            $scope.tab = 'transactions';\n        }\n        else {\n            $scope.tab = 'transactions';\n        }\n\n        $scope.toggleFilter = function () {\n            $scope.show.filter = !$scope.show.filter;\n        };\n\n        //Putting this here so that transactions update\n        //after inserting transaction from newTransactionController\n        $scope.transactions = transactions;\n\n        $scope.filter = FilterFactory.filter;\n        $scope.filterTotals = filterBasicTotals;\n\n        $scope.runFilter = function () {\n            $scope.getFilterBasicTotals();\n            if ($scope.tab === 'transactions') {\n                $scope.filterTransactions();\n            }\n            else {\n                $scope.getGraphTotals();\n            }\n        };\n\n        /**\n         * When this is needed:\n         * When filter is changed (FilterController)\n         * When new transaction is entered (NewTransactionController)\n         * When transaction is edited (TransactionsController)\n         *\n         * So if I put it in the FilterController, how will I update\n         * $scope.transactions in the TransactionsController when a\n         * new transaction is entered in the NewTransactionController?\n         */\n        $scope.filterTransactions = function () {\n            $scope.showLoading();\n            FilterFactory.getTransactions($scope.filter)\n                .then(function (response) {\n                    $scope.transactions = response.data;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                })\n        };\n\n        $scope.getFilterBasicTotals = function () {\n            FilterFactory.getBasicTotals($scope.filter)\n                .then(function (response) {\n                    $scope.filterTotals = response.data;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                })\n        };\n\n        $scope.getGraphTotals = function () {\n            FilterFactory.getGraphTotals($scope.filter)\n                .then(function (response) {\n                    $scope.graphTotals = response.data;\n                    calculateGraphFigures();\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                })\n        };\n\n        /**\n         * This is here because it calls $scope.runFilter,\n         * and that method is in this file\n         */\n        $scope.resetFilter = function () {\n            $scope.filter = FilterFactory.resetFilter();\n            $scope.runFilter();\n        };\n\n        $scope.transactionsTab = function () {\n            $scope.tab = 'transactions';\n            $scope.show.basic_totals = true;\n            $scope.show.budget_totals = true;\n            $scope.show.filter = false;\n            $scope.runFilter();\n        };\n\n        $scope.graphsTab = function () {\n            $scope.tab = 'graphs';\n            $scope.show.basic_totals = false;\n            $scope.show.budget_totals = false;\n            $scope.show.filter = true;\n            $scope.runFilter();\n        };\n\n        if ($scope.tab === 'graphs') {\n            $scope.graphsTab();\n        }\n\n        /**\n         * This is here because it is called by $scope.runFilter,\n         * which is in this file.\n         */\n        function calculateGraphFigures () {\n            $scope.graphFigures = FilterFactory.calculateGraphFigures($scope.graphTotals);\n        }\n\n        /**\n         * Although related to a new transaction, this is here,\n         * not in NewTransactionController,\n         * because it uses $scope.transactions.\n         * @param $transaction\n         */\n        $scope.handleAllocationForNewTransaction = function ($transaction) {\n            FilterFactory.getTransactions($scope.filter)\n                .then(function (response) {\n                    $scope.hideLoading();\n                    $scope.transactions = response.data;\n                    var $index = _.indexOf($scope.transactions, _.findWhere($scope.transactions, {id: $transaction.id}));\n                    if ($index !== -1) {\n                        //The transaction that was just entered is in the filtered transactions\n                        $scope.showAllocationPopup($scope.transactions[$index]);\n                        //$scope.transactions[$index] = $scope.allocationPopup;\n                    }\n                    else {\n                        $scope.showAllocationPopup($transaction);\n                    }\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                })\n        };\n\n        /**\n         * This is here because it is called by $scope.handleAllocationForNewTransaction,\n         * which is in this file\n         * @param $transaction\n         */\n        $scope.showAllocationPopup = function ($transaction) {\n            $scope.show.allocationPopup = true;\n            $scope.allocationPopup = $transaction;\n\n            $scope.showLoading();\n            TransactionsFactory.getAllocationTotals($transaction.id)\n                .then(function (response) {\n                    $scope.allocationPopup.totals = response.data;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n         * This should be in transactions controller but it wasn't firing for some reason\n         * @param $keycode\n         * @param $type\n         * @param $value\n         * @param $budget_id\n         */\n        $scope.updateAllocation = function ($keycode, $type, $value, $budget_id) {\n            if ($keycode === 13) {\n                $scope.showLoading();\n                TransactionsFactory.updateAllocation($type, $value, $scope.allocationPopup.id, $budget_id)\n                    .then(function (response) {\n                        $scope.allocationPopup.budgets = response.data.budgets;\n                        $scope.allocationPopup.totals = response.data.totals;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n\n        /**\n         * This should be in transactions controller but it wasn't firing for some reason\n         */\n        $scope.updateAllocationStatus = function () {\n            $scope.showLoading();\n            TransactionsFactory.updateAllocationStatus($scope.allocationPopup.id, $scope.allocationPopup.allocated)\n                .then(function (response) {\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('NewTransactionController', newTransaction);\n\n    function newTransaction ($scope, NewTransactionFactory, TransactionsFactory, FilterFactory) {\n\n        $scope.dropdown = {};\n        $scope.types = [\"income\", \"expense\", \"transfer\"];\n        $scope.accounts = accounts_response;\n        $scope.new_transaction = NewTransactionFactory.getDefaults(env, $scope.accounts);\n\n        function clearNewTransactionFields () {\n            $scope.new_transaction = NewTransactionFactory.clearFields(env, me, $scope.new_transaction);\n        }\n\n        /**\n         * Return true if there are errors.\n         * @returns {boolean}\n         */\n        function anyErrors () {\n            var $errorMessages = NewTransactionFactory.anyErrors($scope.new_transaction);\n\n            if ($errorMessages) {\n                for (var i = 0; i < $errorMessages.length; i++) {\n                    $scope.provideFeedback($errorMessages[i], 'error');\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Insert a new transaction\n         * @param $keycode\n         */\n        $scope.insertTransaction = function ($keycode) {\n            if ($keycode !== 13 || anyErrors()) {\n                return;\n            }\n\n            $scope.clearTotalChanges();\n\n            if ($scope.new_transaction.type === 'transfer') {\n                insertTransferTransactions();\n            }\n            else {\n                insertIncomeOrExpenseTransaction();\n            }\n        };\n\n        function insertIncomeOrExpenseTransaction () {\n            $scope.showLoading();\n            TransactionsFactory.insertIncomeOrExpenseTransaction($scope.new_transaction)\n                .then(function (response) {\n                    var $transaction = response.data.data;\n                    $scope.provideFeedback('Transaction added');\n                    clearNewTransactionFields();\n                    $scope.new_transaction.dropdown = false;\n                    $scope.getSideBarTotals();\n\n                    if ($transaction.multipleBudgets) {\n                        $scope.handleAllocationForNewTransaction($transaction);\n                        $scope.getFilterBasicTotals();\n                    }\n                    else {\n                        $scope.runFilter();\n                    }\n\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        }\n\n        function insertTransferTransactions () {\n            insertTransferTransaction('from');\n            setTimeout(function(){\n                insertTransferTransaction('to');\n            }, 100);\n        }\n\n        function insertTransferTransaction ($direction) {\n            $scope.showLoading();\n            TransactionsFactory.insertTransferTransaction($scope.new_transaction, $direction)\n                .then(function (response) {\n                    $scope.provideFeedback('Transfer added');\n                    clearNewTransactionFields();\n                    $scope.getSideBarTotals();\n                    $scope.runFilter();\n                    $scope.new_transaction.dropdown = false;\n\n                    //Todo: get filter stuff\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        }\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('PreferencesController', preferences);\n\n    function preferences ($scope, PreferencesFactory) {\n\n        $scope.colors = me.preferences.colors;\n\n        $scope.$watchCollection('colors', function (newValue) {\n            $(\"#income-color-picker\").val(newValue.income);\n            $(\"#expense-color-picker\").val(newValue.expense);\n            $(\"#transfer-color-picker\").val(newValue.transfer);\n        });\n\n        $scope.preferences = {};\n\n        $scope.savePreferences = function () {\n            PreferencesFactory.savePreferences($scope.me.preferences)\n                .then(function (response) {\n                    $scope.provideFeedback('Preferences saved');\n                    //$scope. = response.data;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.defaultColor = function ($type, $default_color) {\n            if ($type === 'income') {\n                $scope.colors.income = $default_color;\n            }\n            else if ($type === 'expense') {\n                $scope.colors.expense = $default_color;\n            }\n            else if ($type === 'transfer') {\n                $scope.colors.transfer = $default_color;\n            }\n        };\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('TransactionsController', transactions);\n\n    function transactions ($scope, TransactionsFactory, FilterFactory) {\n\n        $scope.transactionsFactory = TransactionsFactory;\n        $scope.filterFactory = FilterFactory;\n        $scope.accounts = accounts_response;\n\n        $scope.updateReconciliation = function ($transaction) {\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            TransactionsFactory.updateReconciliation($transaction)\n                .then(function (response) {\n                    $scope.getSideBarTotals();\n                    $scope.runFilter();\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.updateTransactionSetup = function ($transaction) {\n            $scope.edit_transaction = $transaction;\n            //save the original total so I can calculate\n            // the difference if the total changes,\n            // so I can remove the correct amount from savings if required.\n            $scope.edit_transaction.original_total = $scope.edit_transaction.total;\n            $scope.show.edit_transaction = true;\n        };\n\n        $scope.updateTransaction = function () {\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            TransactionsFactory.updateTransaction($scope.edit_transaction)\n                .then(function (response) {\n                    $scope.getSideBarTotals();\n                    $scope.provideFeedback('Transaction updated');\n                    $scope.show.edit_transaction = false;\n                    $scope.totals = response.data;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n         * $scope.edit_transaction.account wasn't updating with ng-model,\n         * so I'm doing it manually.\n         */\n        $scope.fixEditTransactionAccount = function () {\n            $account_id = $(\"#edit-transaction-account\").val();\n\n            $account_match = _.find($scope.accounts, function ($account) {\n                return $account.id === $account_id;\n            });\n            $account_name = $account_match.name;\n\n            $scope.edit_transaction.account.id = $account_id;\n            $scope.edit_transaction.account.name = $account_name;\n        };\n\n        $scope.updateAllocation = function ($keycode, $type, $value, $budget_id) {\n            if ($keycode === 13) {\n                $scope.showLoading();\n                TransactionsFactory.updateAllocation($type, $value, $scope.allocationPopup.id, $budget_id)\n                    .then(function (response) {\n                        $scope.allocationPopup.budgets = response.data.budgets;\n                        $scope.allocationPopup.totals = response.data.totals;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n        $scope.updateAllocationStatus = function () {\n            $scope.showLoading();\n            TransactionsFactory.updateAllocationStatus($scope.allocationPopup)\n                .then(function (response) {\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.deleteTransaction = function ($transaction) {\n            if (confirm(\"Are you sure?\")) {\n                $scope.clearTotalChanges();\n                $scope.showLoading();\n                TransactionsFactory.deleteTransaction($transaction, $scope.filter)\n                    .then(function (response) {\n                        jsDeleteTransaction($transaction);\n                        $scope.getSideBarTotals();\n                        //Todo: get filter totals with separate request\n                        $scope.provideFeedback('Transaction deleted');\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n        function jsDeleteTransaction ($transaction) {\n          var $index = _.indexOf($scope.transactions, _.findWhere($scope.transactions, {id: $transaction.id}));\n            $scope.transactions = _.without($scope.transactions, $scope.transactions[$index]);\n        }\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('UnassignedBudgetsController', unassignedBudgets);\n\n    function unassignedBudgets ($scope) {\n\n    }\n\n})();"],"sourceRoot":"/source/"}