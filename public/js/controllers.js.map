{"version":3,"sources":["1BaseController.js","AccountsController.js","BudgetsController.js","FilterController.js","FixedBudgetsController.js","FlexBudgetsController.js","HelpController.js","HomeController.js","NewTransactionController.js","PreferencesController.js","TotalsController.js","TransactionsController.js","UnassignedBudgetsController.js"],"names":[],"mappingsdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdlLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controllers.js","sourcesContent":["var app = angular.module('budgetApp', ['checklist-model', 'ngAnimate'], function ($interpolateProvider) {\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n});\n\n(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('BaseController', base);\n\n    function base ($scope, $http, $sce, TotalsFactory, UsersFactory, FilterFactory, TransactionsFactory) {\n        /**\n         * Scope properties\n         */\n        $scope.feedback_messages = [];\n        $scope.show = {\n            popups: {},\n            allocationPopup: false,\n            actions: false,\n            status: false,\n            date: true,\n            description: true,\n            merchant: true,\n            total: true,\n            type: true,\n            account: true,\n            reconciled: true,\n            tags: true,\n            dlt: true,\n            //components\n            new_transaction: true,\n            basic_totals: true,\n            budget_totals: true,\n            filter_totals: true,\n            edit_transaction: false,\n            edit_tag: false,\n            budget: false,\n            filter: false,\n            autocomplete: {\n                description: false,\n                merchant: false\n            },\n            savings_total: {\n                input: false,\n                edit_btn: true\n            }\n\n        };\n\n        $scope.me = me;\n        $scope.test = 'hi';\n\n        $scope.testing = function () {\n            console.log('hi');\n        };\n\n        if (typeof env !== 'undefined') {\n            $scope.env = env;\n        }\n\n        if (typeof basicTotals !== 'undefined') {\n            $scope.basicTotals = basicTotals;\n            $scope.fixedBudgetTotals = fixedBudgetTotals;\n            $scope.flexBudgetTotals = flexBudgetTotals;\n            $scope.remainingBalance = remainingBalance;\n        }\n\n        if (typeof page !== 'undefined' && page === 'home') {\n            //Putting this here so that transactions update\n            //after inserting transaction from newTransactionController\n            $scope.transactions = filter_response.transactions;\n\n            $scope.filter = FilterFactory.filter;\n            $scope.filterTotals = filter_response.totals;\n            $scope.graphTotals = filter_response.graph_totals;\n            $scope.budgets = budgets;\n\n            $scope.filterTransactions = function () {\n                $scope.showLoading();\n                FilterFactory.filterTransactions($scope.filter)\n                    .then(function (response) {\n                        $scope.hideLoading();\n                        $scope.transactions = response.data.transactions;\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    })\n            };\n\n            $scope.handleAllocationForNewTransaction = function ($transaction) {\n                FilterFactory.filterTransactions($scope.filter)\n                    .then(function (response) {\n                        $scope.hideLoading();\n                        $scope.transactions = response.data.transactions;\n                        var $index = _.indexOf($scope.transactions, _.findWhere($scope.transactions, {id: $transaction.id}));\n                        if ($index !== -1) {\n                            //The transaction that was just entered is in the filtered transactions\n                            $scope.showAllocationPopup($scope.transactions[$index]);\n                            //$scope.transactions[$index] = $scope.allocationPopup;\n                        }\n                        else {\n                            $scope.showAllocationPopup($transaction);\n                        }\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    })\n            };\n\n            $scope.showAllocationPopup = function ($transaction) {\n                $scope.show.allocationPopup = true;\n                $scope.allocationPopup = $transaction;\n\n                $scope.showLoading();\n                TransactionsFactory.getAllocationTotals($transaction.id)\n                    .then(function (response) {\n                        $scope.allocationPopup.totals = response.data;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            };\n\n            /**\n             * This should be in transactions controller but it wasn't firing for some reason\n             * @param $keycode\n             * @param $type\n             * @param $value\n             * @param $budget_id\n             */\n            $scope.updateAllocation = function ($keycode, $type, $value, $budget_id) {\n                if ($keycode === 13) {\n                    $scope.showLoading();\n                    TransactionsFactory.updateAllocation($type, $value, $scope.allocationPopup.id, $budget_id)\n                        .then(function (response) {\n                            $scope.allocationPopup.budgets = response.data.budgets;\n                            $scope.allocationPopup.totals = response.data.totals;\n                            $scope.hideLoading();\n                        })\n                        .catch(function (response) {\n                            $scope.responseError(response);\n                        });\n                }\n            };\n\n\n            /**\n             * This should be in transactions controller but it wasn't firing for some reason\n             */\n            $scope.updateAllocationStatus = function () {\n                $scope.showLoading();\n                TransactionsFactory.updateAllocationStatus($scope.allocationPopup.id, $scope.allocationPopup.allocated)\n                    .then(function (response) {\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            };\n        }\n\n        $scope.totalChanges = {};\n\n        $scope.clearTotalChanges = function () {\n            $scope.totalChanges = {};\n        };\n\n        $scope.updateTotalsAfterResponse = function (response) {\n            $scope.basicTotals = response.data.basicTotals;\n            $scope.fixedBudgetTotals = response.data.fixedBudgetTotals;\n            $scope.flexBudgetTotals = response.data.flexBudgetTotals;\n            $scope.remainingBalance = response.data.remainingBalance;\n        };\n\n        $(window).load(function () {\n            $(\".main\").css('display', 'block');\n            //$(\"#budget\").css('display', 'flex');\n            $(\"footer, #navbar\").css('display', 'flex');\n            $(\"#page-loading\").hide();\n        });\n\n        $scope.showLoading = function () {\n            $scope.loading = true;\n        };\n\n        $scope.hideLoading = function () {\n            $scope.loading = false;\n        };\n\n        $scope.provideFeedback = function ($message, $type) {\n            var $new = {\n                message: $sce.trustAsHtml($message),\n                type: $type\n            };\n\n            $scope.feedback_messages.push($new);\n\n            //$scope.feedback_messages.push($message);\n\n            setTimeout(function () {\n                $scope.feedback_messages = _.without($scope.feedback_messages, $new);\n                $scope.$apply();\n            }, 3000);\n        };\n\n        $scope.responseError = function (response) {\n            if(typeof response !== \"undefined\") {\n                switch(response.status) {\n                    case 503:\n                        $scope.provideFeedback('Sorry, application under construction. Please try again later.', 'error');\n                        break;\n                    case 401:\n                        $scope.provideFeedback('You are not logged in', 'error');\n                        break;\n                    case 422:\n                        var html = \"<ul>\";\n                        angular.forEach(response.data, function(value, key) {\n                            var fieldName = key;\n                            angular.forEach(value, function(value) {\n                                html += '<li>'+value+'</li>';\n                            });\n                        });\n                        html += \"</ul>\";\n                        $scope.provideFeedback(html, 'error');\n                        break;\n                    default:\n                        $scope.provideFeedback(response.data.error, 'error');\n                        break;\n                }\n            }\n            else {\n                $scope.provideFeedback('There was an error', 'error');\n            }\n            //if (response.status === 503) {\n            //    $scope.provideFeedback('Sorry, application under construction. Please try again later.', 'error');\n            //}\n            //else if (response.status === 401) {\n            //    $scope.provideFeedback('You are not logged in', 'error');\n            //}\n            //// Validation errors\n            //else if (response.status === 422) {\n            //    var html = \"<ul>\";\n            //    angular.forEach(response.data, function(value, key) {\n            //        var fieldName = key;\n            //        angular.forEach(value, function(value) {\n            //            html += '<li>'+value+'</li>';\n            //        });\n            //    });\n            //    html += \"</ul>\";\n            //    $scope.provideFeedback(html, 'error');\n            //}\n            //else if (response.data.error) {\n            //    $scope.provideFeedback(response.data.error, 'error');\n            //}\n            //else if (response.data) {\n            //    //Todo (response.data is in a complicated format)\n            //\n            //}\n            //else {\n            //    $scope.provideFeedback('There was an error', 'error');\n            //}\n            $scope.hideLoading();\n        };\n\n        $scope.closePopup = function ($event, $popup) {\n            var $target = $event.target;\n            if ($target.className === 'popup-outer') {\n                $scope.show.popups[$popup] = false;\n            }\n        };\n\n        $scope.deleteUser = function () {\n            if (confirm(\"Do you really want to delete your account?\")) {\n                if (confirm(\"You are about to delete your account! You will no longer be able to use the budget app. Are you sure this is what you want?\")) {\n                    $scope.showLoading();\n                    UsersFactory.deleteAccount($scope.me)\n                        .then(function (response) {\n                            //$scope. = response.data;\n                            $scope.provideFeedback('Your account has been deleted');\n                            $scope.hideLoading();\n                        })\n                        .catch(function (response) {\n                            $scope.responseError(response);\n                        });\n                }\n            }\n        };\n\n        $scope.formatDate = function ($date) {\n            if ($date) {\n                if (!Date.parse($date)) {\n                    $scope.provideFeedback('Date is invalid', 'error');\n                    return false;\n                }\n                else {\n                    return Date.parse($date).toString('yyyy-MM-dd');\n                }\n            }\n            return false;\n        };\n\n        if (typeof page !== 'undefined' && (page === 'home' || page === 'budgets')) {\n            $scope.getTotals = function () {\n                $scope.showLoading();\n                TotalsFactory.getTotals()\n                    .then(function (response) {\n                        $scope.updateTotalsAfterResponse(response);\n                        //$scope.provideFeedback('');\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            };\n\n            $scope.getSideBarTotals = function () {\n                $scope.showLoading();\n                TotalsFactory.getSideBarTotals()\n                    .then(function (response) {\n                        $scope.sideBarTotals = response.data.data;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            };\n\n            $scope.getSideBarTotals();\n        }\n    }\n\n})();\n","var app = angular.module('budgetApp');\n\n(function () {\n\n    app.controller('AccountsController', function ($scope, $http, AccountsFactory, FeedbackFactory) {\n\n        /**\n         * scope properties\n         */\n\n        //$scope.me = me;\n        $scope.autocomplete = {};\n        $scope.edit_account = false;\n        $scope.accounts = accounts;\n        $scope.feedbackFactory = FeedbackFactory;\n        $scope.edit_account_popup = {};\n\n        $scope.$watch('feedbackFactory.data', function (newValue, oldValue, scope) {\n            if (newValue && newValue.message) {\n                scope.provideFeedback(newValue.message);\n            }\n        });\n\n        /**\n         * select\n         */\n\n        $scope.getAccounts = function () {\n            $scope.showLoading();\n            AccountsFactory.getAccounts()\n                .then(function (response) {\n                    $scope.accounts = response.data;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n         * insert\n         */\n\n        $scope.insertAccount = function ($keycode) {\n            if ($keycode !== 13) {\n                return;\n            }\n\n            $scope.showLoading();\n            AccountsFactory.insertAccount()\n                .then(function (response) {\n                    $scope.getAccounts();\n                    $scope.provideFeedback('Account added');\n                    $(\"#new_account_input\").val(\"\");\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n         * update\n         */\n\n        $scope.showEditAccountPopup = function ($account_id, $account_name) {\n            $scope.edit_account_popup.id = $account_id;\n            $scope.edit_account_popup.name = $account_name;\n            $scope.show.popups.edit_account = true;\n        };\n\n        $scope.updateAccount = function () {\n            $scope.showLoading();\n            AccountsFactory.updateAccountName($scope.edit_account_popup.id, $scope.edit_account_popup.name)\n                .then(function (response) {\n                    $scope.getAccounts();\n                    $scope.provideFeedback('Account edited');\n                    $scope.show.popups.edit_account = false;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n         * delete\n         */\n\n        $scope.deleteAccount = function ($account) {\n            if (confirm(\"Are you sure you want to delete this account?\")) {\n                $scope.showLoading();\n                AccountsFactory.deleteAccount($account)\n                    .then(function (response) {\n                        $scope.getAccounts();\n                        $scope.provideFeedback('Account deleted');\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n    }); //end controller\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('BudgetsController', budgets);\n\n    function budgets ($scope, $http, BudgetsFactory, FilterFactory, FeedbackFactory, TransactionsFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.show = {\n            newBudget: false,\n            popups: {}\n        };\n\n        $scope.toggleNewBudget = function () {\n            $scope.show.newBudget = true;\n        };\n        $scope.fixedBudgets = fixedBudgets;\n        $scope.flexBudgets = flexBudgets;\n        $scope.unassignedBudgets = unassignedBudgets;\n        $scope.feedbackFactory = FeedbackFactory;\n\n        $scope.show.basic_totals = true;\n        $scope.show.budget_totals = true;\n        //$scope.tab = 'flex';\n        $scope.newBudget = {\n            type: 'fixed'\n        };\n\n        /**\n        * Watches\n        */\n\n        $scope.$watch('feedbackFactory.data', function (newValue, oldValue, scope) {\n            if (newValue && newValue.message) {\n                scope.provideFeedback(newValue.message);\n            }\n        });\n\n        $scope.insertBudget = function ($keycode) {\n            if ($keycode !== 13) {\n                return;\n            }\n\n            var $budget = $scope.newBudget;\n\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            $budget.sql_starting_date = $scope.formatDate($budget.starting_date);\n            BudgetsFactory.insert($budget)\n                .then(function (response) {\n                    $scope.jsInsertBudget(response);\n                    $scope.getSideBarTotals();\n                    $scope.provideFeedback('Budget created');\n\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        /**\n        * Add the budget to the JS array\n        */\n        $scope.jsInsertBudget = function (response) {\n            var $budget = response.data;\n            if ($budget.type === 'fixed') {\n                $scope.fixedBudgets.push($budget);\n            }\n            else if ($budget.type === 'flex') {\n                $scope.flexBudgets.push($budget);\n            }\n            else if ($budget.type === 'unassigned') {\n                $scope.unassignedBudgets.push($budget);\n            }\n        };\n\n        /**\n        * For updating budget (name, type, amount, starting date) for an existing budget\n        */\n        $scope.updateBudget = function () {\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            $scope.budget_popup.sqlStartingDate = $scope.formatDate($scope.budget_popup.formattedStartingDate);\n            BudgetsFactory.update($scope.budget_popup)\n                .then(function (response) {\n                    $scope.jsUpdateBudget(response);\n                    $scope.getSideBarTotals();\n                    //$scope.updateTotalsAfterResponse(response);\n                    $scope.show.popups.budget = false;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.jsUpdateBudget = function (response) {\n            //todo: allow for if budget type is changed. I will have to remove the budget from the table it was in\n            var $budget = response.data;\n            if ($budget.type === 'flex') {\n                var $index = _.indexOf($scope.flexBudgets, _.findWhere($scope.flexBudgets, {id: response.data.id}));\n                $scope.flexBudgets[$index] = response.data;\n            }\n            else if ($budget.type === 'fixed') {\n                var $index = _.indexOf($scope.fixedBudgets, _.findWhere($scope.fixedBudgets, {id: response.data.id}));\n                $scope.fixedBudgets[$index] = response.data;\n            }\n\n        };\n\n        //$scope.handleUpdateResponse = function (response, $message) {\n        //    FilterFactory.updateDataForControllers(response.data);\n        //    $scope.updateTotalsAfterResponse(response);\n        //    $scope.hideLoading();\n        //    $scope.provideFeedback($message);\n        //};\n\n        $scope.deleteBudget = function ($budget) {\n            $scope.showLoading();\n            if (confirm('You have ' + $budget.transactionsCount + ' transactions with this budget. Are you sure you want to delete it?')) {\n                $scope.showLoading();\n                BudgetsFactory.destroy($budget)\n                    .then(function (response) {\n                        $scope.getSideBarTotals();\n                        $scope.jsDeleteBudget($budget);\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n            else {\n                $scope.hideLoading();\n            }\n        };\n\n        $scope.jsDeleteBudget = function ($budget) {\n            if ($budget.type === 'fixed') {\n                var $index = _.indexOf($scope.fixedBudgets, _.findWhere($scope.fixedBudgets, {id: $budget.id}));\n                $scope.fixedBudgets = _.without($scope.fixedBudgets, $budget);\n            }\n            else if ($budget.type === 'flex') {\n                var $index = _.indexOf($scope.flexBudgets, _.findWhere($scope.flexBudgets, {id: $budget.id}));\n                $scope.flexBudgets = _.without($scope.flexBudgets, $budget);\n            }\n            else if ($budget.type === 'unassigned') {\n                var $index = _.indexOf($scope.unassignedBudgets, _.findWhere($scope.unassignedBudgets, {id: $budget.id}));\n                $scope.unassignedBudgets = _.without($scope.unassignedBudgets, $budget);\n            }\n\n        };\n\n\n        //$scope.updateTag = function ($tag, response) {\n        //    var $index = _.indexOf($scope.tags, _.findWhere($scope.tags, {id: $tag.id}));\n        //    $scope.tags[$index] = response.data.tag;\n        //};\n\n        /**\n         * Return true if tag has a budget already\n         * @returns {boolean}\n         */\n        //$scope.tagHasBudget = function ($new) {\n        //    if ($new.flex_budget) {\n        //        $scope.provideFeedback(\"You've got a flex budget for that tag.\", 'error');\n        //        return true;\n        //    }\n        //    else if ($new.fixed_budget) {\n        //        $scope.provideFeedback(\"You've got a fixed budget for that tag.\", 'error');\n        //        return true;\n        //    }\n        //    return false;\n        //};\n\n        /**\n         * Clear the tag inputs and focus the correct input\n         * after entering a new budget\n         * todo: clear the budget input\n         * @param $type\n         */\n        //$scope.clearAndFocus = function ($type) {\n        //    if ($type === 'fixed') {\n        //        //I'm baffled as to why this works to clear the input when the ng-model is new_FB.\n        //        //$scope.new_fixed_budget.tag.name = '';\n        //\n        //        $(\"#new-fixed-budget-name-input\").val(\"\").focus();\n        //        $(\"#new-fixed-budget-SD\").val(\"\");\n        //        $(\"#new-fixed-budget-amount\").val(\"\");\n        //    }\n        //    else {\n        //        $(\"#new-flex-budget-name-input\").val(\"\").focus();\n        //        $(\"#new-flex-budget-SD\").val(\"\");\n        //        $(\"#new-flex-budget-amount\").val(\"\");\n        //    }\n        //};\n\n        //$scope.removeBudget = function ($tag) {\n        //    if (confirm(\"Remove \" + $tag.budget_type + \" budget for \" + $tag.name + \"?\")) {\n        //        $scope.showLoading();\n        //        BudgetsFactory.removeBudget($tag)\n        //            .then(function (response) {\n        //                $scope.updateTotalsAfterResponse(response);\n        //                $scope.updateTag($tag, response);\n        //                $scope.provideFeedback('Budget deleted');\n        //                $scope.hideLoading();\n        //            })\n        //            .catch(function (response) {\n        //                $scope.responseError(response);\n        //            });\n        //    }\n        //};\n\n        $scope.showBudgetPopup = function ($tag, $type) {\n            $scope.budget_popup = $tag;\n            $scope.budget_popup.type = $type;\n            $scope.show.popups.budget = true;\n        };\n\n        //$scope.updateSavingsTotal = function ($keycode) {\n        //    if ($keycode !== 13) {\n        //        return;\n        //    }\n        //    savings.updatesavingsTotal()\n        //        .then(function (response) {\n        //            $scope.totals.basic.savings_total = response.data;\n        //            $scope.show.savings_total.input = false;\n        //            $scope.show.savings_total.edit_btn = true;\n        //            $scope.getTotals();\n        //        })\n        //        .catch(function (response) {\n        //            FeedbackFactory.provideFeedback('There was an error');\n        //        });\n        //};\n\n        //$scope.addFixedToSavings = function ($keycode) {\n        //    if ($keycode !== 13) {\n        //        return;\n        //    }\n        //    savings.addFixedToSavings()\n        //        .then(function (response) {\n        //            $scope.totals.basic.savings_total = response.data;\n        //            $scope.getTotals();\n        //        })\n        //        .catch(function (response) {\n        //            FeedbackFactory.provideFeedback('There was an error');\n        //        });\n        //};\n\n        //$scope.addPercentageToSavings = function ($keycode) {\n        //    if ($keycode !== 13) {\n        //        return;\n        //    }\n        //    savings.addPercentageToSavings()\n        //        .then(function (response) {\n        //            $scope.totals.basic.savings_total = response.data;\n        //            $scope.getTotals();\n        //        })\n        //        .catch(function (response) {\n        //            FeedbackFactory.provideFeedback('There was an error');\n        //        });\n        //};\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FilterController', filter);\n\n    function filter ($scope, $http, FilterFactory, FeedbackFactory) {\n\n        $scope.something = 'abcdefghijklmn';\n        /**\n         * scope properties\n         */\n\n        $scope.filterFactory = FilterFactory;\n        $scope.accounts = accounts_response;\n        $scope.budgets = budgets;\n        $scope.types = [\"income\", \"expense\", \"transfer\"];\n        $scope.filterTab = 'show';\n\n        $scope.resetFilter = function () {\n            FilterFactory.resetFilter();\n        };\n\n        /**\n         * Watches\n         */\n\n        //$scope.$watch('filterFactory.filter_results.graph_totals', function (newValue, oldValue, scope) {\n        //    if (newValue) {\n        //        //This is running many times when it shouldn't\n        //        scope.graph_totals = newValue;\n        //        $scope.calculateGraphFigures();\n        //    }\n        //});\n\n        $scope.$watchCollection('filter.budgets.in.and', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.filterTransactions();\n        });\n\n        $scope.$watchCollection('filter.budgets.in.or', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.filterTransactions();\n        });\n\n        $scope.$watchCollection('filter.budgets.out', function (newValue, oldValue) {\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.filterTransactions();\n        });\n\n        $scope.$watchGroup(['filter.offset', 'filter.num_to_fetch'], function (newValue, oldValue) {\n            $scope.filter.display_from = $scope.filter.offset + 1;\n            $scope.filter.display_to = $scope.filter.offset + ($scope.filter.num_to_fetch * 1);\n            if (newValue === oldValue) {\n                return;\n            }\n            $scope.filterTransactions();\n        });\n\n        /**\n         * End watches\n         */\n\n        $scope.calculateGraphFigures = function () {\n            $scope.graphFigures = {\n                months: []\n            };\n\n            $($scope.graphTotals.monthsTotals).each(function () {\n                var $income = this.income.raw;\n                var $expenses = this.expenses.raw * -1;\n\n                var $max = $scope.graphTotals.maxTotal;\n                var $num = 500 / $max;\n\n                $scope.graphFigures.months.push({\n                    incomeHeight: $income * $num,\n                    expensesHeight: $expenses * $num,\n                    income: this.income,\n                    expenses: this.expenses,\n                    month: this.month\n                });\n            });\n        };\n\n        //Todo: I might not need some of this code (not allowing offset to be less than 0)\n        // todo: since I disabled the button if that is the case\n        $scope.prevResults = function () {\n            //make it so the offset cannot be less than 0.\n            if ($scope.filter.offset - $scope.filter.num_to_fetch < 0) {\n                $scope.filter.offset = 0;\n            }\n            else {\n                $scope.filter.offset-= ($scope.filter.num_to_fetch * 1);\n            }\n        };\n\n        $scope.nextResults = function () {\n            if ($scope.filter.offset + ($scope.filter.num_to_fetch * 1) > $scope.filterTotals.numTransactions) {\n                //stop it going past the end.\n                return;\n            }\n            $scope.filter.offset+= ($scope.filter.num_to_fetch * 1);\n        };\n\n        $scope.resetSearch = function () {\n            $(\"#search-type-select, #search-account-select, #search-reconciled-select\").val(\"all\");\n            $(\"#single-date-input, #from-date-input, #to-date-input, #search-descriptions-input, #search-merchants-input, #search-tags-input\").val(\"\");\n            $(\"#search-tag-location\").html(\"\");\n            $scope.filterTransactions(true);\n        };\n\n        $scope.filterDescriptionOrMerchant = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.resetOffset();\n            $scope.filterTransactions(true);\n        };\n\n        $scope.filterDate = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.filterTransactions();\n        };\n\n        $scope.filterTotal = function ($keycode) {\n            if ($keycode !== 13) {\n                return false;\n            }\n            $scope.filterTransactions();\n        };\n\n        /**\n         * $type is either 'in' or 'out'\n         * @param $field\n         * @param $type\n         */\n        $scope.clearFilterField = function ($field, $type) {\n            $scope.filter[$field][$type] = \"\";\n            $scope.filterTransactions();\n        };\n\n        /**\n         * $type1 is 'in' or 'out'.\n         * $type2 is 'and' or 'or'.\n         * @param $type1\n         * @param $type2\n         */\n        $scope.clearTagField = function ($type1, $type2) {\n            if ($type2) {\n                $scope.filter.budgets[$type1][$type2] = [];\n            }\n            else {\n                $scope.filter.budgets[$type1] = [];\n            }\n        };\n\n        /**\n         * $type is either 'in' or 'out'\n         * @param $field\n         * @param $type\n         */\n        $scope.clearDateField = function ($field, $type) {\n            $scope.filter[$field][$type]['user'] = \"\";\n            $scope.filterTransactions();\n        };\n\n        $scope.resetOffset = function () {\n            $scope.filter.offset = 0;\n        };\n\n        $scope.showContent = function (event) {\n            $(event.target).next().addClass('show-me').removeClass('hide');\n        };\n\n        $scope.hideContent = function (event) {\n            $(event.target).next().addClass('hide-me').removeClass('show');\n        };\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FixedBudgetsController', budgets);\n\n    function budgets ($scope, $http, BudgetsFactory, FilterFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('FlexBudgetsController', budgets);\n\n    function budgets ($scope, $http, BudgetsFactory, FilterFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n\n\n    }\n\n})();","var app = angular.module('budgetApp');\n\n(function () {\n\n    app.controller('HelpController', function ($scope, $http, AccountsFactory, FeedbackFactory) {\n\n\n\n    }); //end controller\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('HomeController', home);\n\n    function home ($scope, $http, TransactionsFactory, PreferencesFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.transactionsFactory = TransactionsFactory;\n        $scope.page = 'home';\n\n        $scope.colors = me.preferences.colors;\n\n        if ($scope.env === 'local') {\n            $scope.tab = 'transactions';\n        }\n        else {\n            $scope.tab = 'transactions';\n        }\n\n        /**\n         * Watches\n         */\n\n        $scope.$watch('PreferencesFactory.date_format', function (newValue, oldValue) {\n            if (!newValue) {\n                return;\n            }\n            $scope.showLoading();\n            PreferencesFactory.insertOrUpdateDateFormat(newValue)\n                .then(function (response) {\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        });\n\n        /**\n         * End watches\n         */\n\n        /**\n         * For trying to get the page load faster,\n         * seeing the queries that are taking place\n         */\n        $scope.debugTotals = function () {\n            return $http.get('/test');\n        };\n\n        $scope.toggleFilter = function () {\n            $scope.show.filter = !$scope.show.filter;\n        };\n\n        $scope.transactionsTab = function () {\n            $scope.tab = 'transactions';\n            $scope.show.basic_totals = true;\n            $scope.show.budget_totals = true;\n            $scope.show.filter = false;\n        };\n\n        $scope.graphsTab = function () {\n            $scope.tab = 'graphs';\n            $scope.show.basic_totals = false;\n            $scope.show.budget_totals = false;\n            $scope.show.filter = true;\n        };\n\n        if ($scope.tab === 'graphs') {\n            $scope.graphsTab();\n        }\n\n\n\n\n\n\n\n\n\n\n        /*==============================quick select of transactions==============================*/\n\n        $(\"body\").on('click', '.mass-delete-checkbox-container', function (event) {\n            var $this = $(this).closest(\"tbody\");\n            var $checked = $(\".checked\");\n            $(\".last-checked\").removeClass(\"last-checked\");\n            $(\".first-checked\").removeClass(\"first-checked\");\n\n            if (event.shiftKey) {\n                var $last_checked = $($checked).last().closest(\"tbody\");\n                var $first_checked = $($checked).first().closest(\"tbody\");\n\n                $($last_checked).addClass(\"last-checked\");\n                $($first_checked).addClass(\"first-checked\");\n                $($this).addClass(\"checked\");\n\n                if ($($this).prevAll(\".last-checked\").length !== 0) {\n                    //$this is after .last-checked\n                    shiftSelect(\"forwards\");\n                }\n                else if ($($this).nextAll(\".last-checked\").length !== 0) {\n                    //$this is before .last-checked\n                    shiftSelect(\"backwards\");\n                }\n            }\n            else if (event.altKey) {\n                $($this).toggleClass('checked');\n            }\n            else {\n                console.log(\"no shift\");\n                $(\".checked\").not($this).removeClass('checked');\n                $($this).toggleClass('checked');\n            }\n        });\n\n        function shiftSelect ($direction) {\n            $(\"#my_results tbody\").each(function () {\n                var $prev_checked_length = $(this).prevAll(\".checked\").length;\n                var $after_checked_length = $(this).nextAll(\".checked\").length;\n                var $after_last_checked = $(this).prevAll(\".last-checked\").length;\n                var $before_first_checked = $(this).nextAll(\".first-checked\").length;\n\n                if ($direction === \"forwards\") {\n                    //if it's after $last_checked and before $this\n                    if ($prev_checked_length !== 0 && $after_checked_length !== 0 && $after_last_checked !== 0) {\n                        $(this).addClass('checked');\n                    }\n                }\n                else if ($direction === \"backwards\") {\n                    if ($prev_checked_length !== 0 && $after_checked_length !== 0 && $before_first_checked !== 0) {\n                        $(this).addClass('checked');\n                    }\n                }\n            });\n        }\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('NewTransactionController', newTransaction);\n\n    function newTransaction ($scope, $http, TransactionsFactory, FilterFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n\n        $scope.filterFactory = FilterFactory;\n        $scope.dropdown = {};\n        $scope.types = [\"income\", \"expense\", \"transfer\"];\n\n        $scope.new_transaction = {\n            type: 'income',\n            account_id: 1,\n            date: {\n                entered: 'today'\n            },\n            merchant: '',\n            description: '',\n            reconciled: false,\n            multiple_budgets: false,\n            budgets: []\n        };\n\n        /**\n         * Fill in the new transaction fields if development environment\n         */\n        if ($scope.env === 'local') {\n            $scope.new_transaction.total = 10;\n            $scope.new_transaction.type = 'expense';\n            $scope.new_transaction.date.entered = 'today';\n            $scope.new_transaction.merchant = 'some merchant';\n            $scope.new_transaction.description = 'some description';\n            $scope.new_transaction.budgets = [\n                {\n                    id: '2',\n                    name: 'business',\n                    type: 'fixed'\n                },\n                {\n                    id: '4',\n                    name: 'busking',\n                    type: 'flex'\n                }\n            ];\n        }\n\n        $scope.accounts = accounts_response;\n        if ($scope.accounts[0]) {\n            //this if check is to get rid of the error for a new user who does not yet have any accounts.\n            $scope.new_transaction.account_id = $scope.accounts[0].id;\n            $scope.new_transaction.from_account_id = $scope.accounts[0].id;\n            $scope.new_transaction.to_account_id = $scope.accounts[0].id;\n        }\n\n        /**\n         * Clear new transaction fields\n         */\n        function clearNewTransactionFields () {\n            if ($scope.env !== 'local') {\n                $scope.new_transaction.budgets = [];\n            }\n\n            if (me.preferences.clearFields) {\n                $scope.new_transaction.total = '';\n                $scope.new_transaction.description = '';\n                $scope.new_transaction.merchant = '';\n                $scope.new_transaction.reconciled = false;\n                $scope.new_transaction.multiple_budgets = false;\n            }\n        }\n\n        /**\n         * Return true if there are errors.\n         * @returns {boolean}\n         */\n        function anyErrors () {\n            $errorCount = 0;\n            var $messages = [];\n\n            if (!Date.parse($scope.new_transaction.date.entered)) {\n                $scope.provideFeedback('Date is not valid', 'error');\n                $errorCount++;\n            }\n            else {\n                $scope.new_transaction.date.sql = Date.parse($scope.new_transaction.date.entered).toString('yyyy-MM-dd');\n            }\n\n            if ($scope.new_transaction.total === \"\") {\n                $scope.provideFeedback('Total is required', 'error');\n                $errorCount++;\n            }\n            else if (!$.isNumeric($scope.new_transaction.total)) {\n                $scope.provideFeedback('Total is not a valid number', 'error');\n                $errorCount++;\n            }\n\n            if ($errorCount > 0) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Insert a new transaction\n         * @param $keycode\n         */\n        $scope.insertTransaction = function ($keycode) {\n            if ($keycode !== 13 || anyErrors()) {\n                return;\n            }\n\n            $scope.clearTotalChanges();\n\n            if ($scope.new_transaction.type === 'transfer') {\n                insertTransferTransactions();\n            }\n            else {\n                insertIncomeOrExpenseTransaction();\n            }\n        };\n\n        function insertIncomeOrExpenseTransaction () {\n            $scope.showLoading();\n            TransactionsFactory.insertIncomeOrExpenseTransaction($scope.new_transaction)\n                .then(function (response) {\n                    var $transaction = response.data.data;\n                    $scope.provideFeedback('Transaction added');\n                    clearNewTransactionFields();\n                    $scope.new_transaction.dropdown = false;\n                    $scope.getSideBarTotals();\n\n                    if ($transaction.hasMultipleBudgets) {\n                        $scope.handleAllocationForNewTransaction($transaction);\n                    }\n                    else {\n                        $scope.filterTransactions();\n                    }\n\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        }\n\n        function insertTransferTransactions () {\n            insertTransferTransaction('from');\n            setTimeout(function(){\n                insertTransferTransaction('to');\n            }, 100);\n        }\n\n        function insertTransferTransaction ($direction) {\n            $scope.showLoading();\n            TransactionsFactory.insertTransferTransaction($scope.new_transaction, $direction)\n                .then(function (response) {\n                    $scope.provideFeedback('Transfer added');\n                    clearNewTransactionFields();\n                    $scope.getSideBarTotals();\n                    $scope.filterTransactions();\n                    $scope.new_transaction.dropdown = false;\n\n                    //Todo: get filter stuff\n                    //FilterFactory.updateDataForControllers(response.data);\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        }\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('PreferencesController', preferences);\n\n    function preferences ($scope, $http, PreferencesFactory, FeedbackFactory) {\n\n        $scope.colors = me.preferences.colors;\n\n        $scope.$watchCollection('colors', function (newValue) {\n            $(\"#income-color-picker\").val(newValue.income);\n            $(\"#expense-color-picker\").val(newValue.expense);\n            $(\"#transfer-color-picker\").val(newValue.transfer);\n        });\n\n        /**\n         * scope properties\n         */\n\n        $scope.preferences = {};\n\n        $scope.responseError = function (response) {\n            if (response.status === 503) {\n                FeedbackFactory.provideFeedback('Sorry, application under construction. Please try again later.');\n            }\n            else {\n                FeedbackFactory.provideFeedback('There was an error');\n            }\n        };\n\n        $scope.savePreferences = function () {\n            PreferencesFactory.savePreferences($scope.me.preferences)\n                .then(function (response) {\n                    //$scope. = response.data;\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.defaultColor = function ($type, $default_color) {\n            if ($type === 'income') {\n                $scope.colors.income = $default_color;\n            }\n            else if ($type === 'expense') {\n                $scope.colors.expense = $default_color;\n            }\n            else if ($type === 'transfer') {\n                $scope.colors.transfer = $default_color;\n            }\n        };\n    }\n\n})();","\n(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('TotalsController', totals);\n\n    function totals ($scope, $http) {\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('TransactionsController', transactions);\n\n    function transactions ($scope, $http, TransactionsFactory, FilterFactory) {\n\n        $scope.transactionsFactory = TransactionsFactory;\n        $scope.filterFactory = FilterFactory;\n        $scope.accounts = accounts_response;\n\n        $scope.updateReconciliation = function ($transaction) {\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            TransactionsFactory.updateReconciliation($transaction)\n                .then(function (response) {\n                    $scope.getSideBarTotals();\n                    $scope.filterTransactions();\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.updateTransactionSetup = function ($transaction) {\n            $scope.edit_transaction = $transaction;\n            //save the original total so I can calculate\n            // the difference if the total changes,\n            // so I can remove the correct amount from savings if required.\n            $scope.edit_transaction.original_total = $scope.edit_transaction.total;\n            $scope.show.edit_transaction = true;\n        };\n\n        $scope.updateTransaction = function () {\n            $scope.clearTotalChanges();\n            $scope.showLoading();\n            TransactionsFactory.updateTransaction($scope.edit_transaction)\n                .then(function (response) {\n                    $scope.getSideBarTotals();\n                    $scope.provideFeedback('Transaction updated');\n                    $scope.show.edit_transaction = false;\n                    $scope.totals = response.data;\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.fixEditTransactionAccount = function () {\n            //$scope.edit_transaction.account wasn't updating with ng-model, so I'm doing it manually.\n            $account_id = $(\"#edit-transaction-account\").val();\n\n            $account_match = _.find($scope.accounts, function ($account) {\n                return $account.id === $account_id;\n            });\n            $account_name = $account_match.name;\n\n            $scope.edit_transaction.account.id = $account_id;\n            $scope.edit_transaction.account.name = $account_name;\n        };\n\n        $scope.massEditTags = function () {\n            $scope.showLoading();\n            TransactionsFactory.updateMassTags()\n                .then(function (response) {\n                    multiSearch();\n                    $tag_array.length = 0;\n                    $tag_location.html($tag_array);\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.massEditDescription = function () {\n            $scope.showLoading();\n            TransactionsFactory.updateMassDescription()\n                .then(function (response) {\n                    multiSearch();\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.updateAllocation = function ($keycode, $type, $value, $budget_id) {\n            if ($keycode === 13) {\n                $scope.showLoading();\n                TransactionsFactory.updateAllocation($type, $value, $scope.allocationPopup.id, $budget_id)\n                    .then(function (response) {\n                        $scope.allocationPopup.budgets = response.data.budgets;\n                        $scope.allocationPopup.totals = response.data.totals;\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n        $scope.updateAllocationStatus = function () {\n            $scope.showLoading();\n            TransactionsFactory.updateAllocationStatus($scope.allocationPopup)\n                .then(function (response) {\n                    $scope.hideLoading();\n                })\n                .catch(function (response) {\n                    $scope.responseError(response);\n                });\n        };\n\n        $scope.deleteTransaction = function ($transaction) {\n            if (confirm(\"Are you sure?\")) {\n                $scope.clearTotalChanges();\n                $scope.showLoading();\n                TransactionsFactory.deleteTransaction($transaction, $scope.filter)\n                    .then(function (response) {\n                        jsDeleteTransaction($transaction);\n                        $scope.getSideBarTotals();\n                        //Todo: get filter totals with separate request\n                        //FilterFactory.updateDataForControllers(response.data);\n\n                        $scope.provideFeedback('Transaction deleted');\n                        $scope.hideLoading();\n                    })\n                    .catch(function (response) {\n                        $scope.responseError(response);\n                    });\n            }\n        };\n\n        function jsDeleteTransaction ($transaction) {\n          var $index = _.indexOf($scope.transactions, _.findWhere($scope.transactions, {id: $transaction.id}));\n            $scope.transactions = _.without($scope.transactions, $scope.transactions[$index]);\n        }\n\n        $(\"#mass-delete-button\").on('click', function () {\n            if (confirm(\"You are about to delete \" + $(\".checked\").length + \" transactions. Are you sure you want to do this?\")) {\n                massDelete();\n            }\n        });\n\n    }\n\n})();","(function () {\n\n    angular\n        .module('budgetApp')\n        .controller('UnassignedBudgetsController', budgets);\n\n    function budgets ($scope, $http, BudgetsFactory, FilterFactory, FeedbackFactory) {\n        /**\n         * scope properties\n         */\n        $scope.unassignedBudgetTotals = unassignedBudgetTotals;\n    }\n\n})();"],"sourceRoot":"/source/"}